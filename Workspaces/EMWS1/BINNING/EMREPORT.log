MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 07, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "21:30:36" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                November 07, 2018
Time:                21:30:36
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1D3BXJ8 "J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1D3BXJ8 new;
MPRINT(EM_DIAGRAM):   run;
36379      %let EMEXCEPTIONSTRING=;
36380      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
36381      * REPORT: BINNING;
MPRINT(EM_DIAGRAM):   * REPORT: BINNING;
36382      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36383      %let EM_ACTION = REPORT;
36384      %let syscc = 0;
36385      %macro main;
36386      
36387        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
36388        %include temp;
36389        filename temp;
36390      
36391        %setProperties;
36392      
36393        %if %upcase(&EM_ACTION) = CREATE %then %do;
36394          filename temp catalog 'sashelp.emmdfy.binning_create.source';
36395          %include temp;
36396          filename temp;
36397      
36398          %create;
36399        %end;
36400      
36401         %else
36402         %if %upcase(&EM_ACTION) = TRAIN %then %do;
36403      
36404             filename temp catalog 'sashelp.emmdfy.binning_train.source';
36405             %include temp;
36406             filename temp;
36407             %train;
36408         %end;
36409      
36410        %else
36411        %if %upcase(&EM_ACTION) = SCORE %then %do;
36412          filename temp catalog 'sashelp.emmdfy.binning_score.source';
36413          %include temp;
36414          filename temp;
36415      
36416          %score;
36417      
36418        %end;
36419      
36420        %else
36421        %if %upcase(&EM_ACTION) = REPORT %then %do;
36422      
36423             filename temp catalog 'sashelp.emmdfy.binning_report.source';
36424             %include temp;
36425             filename temp;
36426      
36427             %report;
36428         %end;
36429      
36430         %doendm:
36431      %mend main;
36432      
36433      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
36435     +%macro SetProperties;
36437     +     /* IGN options */
36438     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
36439     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
36440     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
36442     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
36443     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
36444     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
36445     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
36446     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
36447     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
36448     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
36449     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
36450     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
36451     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
36452     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
36453     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
36454     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
36455     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
36457     +     %em_checkmacro(name=EM_PROPERTY_INTTARGETMETHOD, value=CUTMEAN, global=Y);
36458     +     %em_checkmacro(name=EM_PROPERTY_USERCUTVALUE, value=0.2, global=Y);
36459     +     %em_checkmacro(name=EM_PROPERTY_RejectIntTarget, value=N, global=Y);
36462     +%mend SetProperties;
36463     +%macro appendfiles(fileref1, fileref2);
36464     +     data _null_;
36465     +       length c $256;
36466     +       fid1=fopen("&fileref1",'A');
36467     +       fid2=fopen("&fileref2",'I');
36468     +       cval = finfo(fid2,'lrecl');
36469     +       put cval= fid1= fid2=;
36470     +       if (fid2 > 0) then
36471     +         do while(fread(fid2)=0);
36472     +           rc = fget(fid2,c,256);
36473     +           _msg_=sysmsg();
36474     +           /* put rc= c= _msg_=; */
36475     +           rc = fput(fid1,strip(c));
36476     +           rc = fwrite(fid1);
36477     +         end;
36478     +         _msg_=sysmsg();
36479     +         put _msg_=;
36480     +       rc = fclose(fid1);
36481     +       rc = fclose(fid2);
36482     +     run;
36483     +%mend appendfiles;
36485     +%macro buildOptScoreCode;
36487     +    %em_register(key=BINCODE, type=FOLDER);
36489     +    filename x catalog 'sashelp.emutil.em_deldir.source';
36490     +    %inc x;
36491     +    filename x;
36492     +    %delDir(folder=%nrbquote(&em_user_bincode));
36494     +    data _null_; length rc $200;
36495     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
36496     +    run;
36498     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
36500     +    %let dsid = %sysfunc(open(class_nosv));
36501     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
36502     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
36504     +    %let oldname=;
36505     +    %do %while(^%sysfunc(fetch(&dsid)));
36506     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
36507     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
36509     +        %if &name ne &oldname %then %do;
36510     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
36511     +             data _null_;
36512     +                length string $200 flag endflag 8;
36513     +                retain string flag endflag;
36514     +                set class_nosv end=eof;
36515     +                where DISPLAY_VAR ="&name";
36516     +                by _variable_ _group_;
36517     +                file _F1;
36518     +                index = kindex(_variable_, "BIN_");
36519     +                if index gt 0 then do;
36520     +                   if first._variable_ then do;
36521     +                      put ' ';
36522     +                      put "&EM_CODEBAR;";
36523     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
36524     +                      put string;
36525     +                      put "&EM_CODEBAR;";
36527     +                      if origLabel ne "" then do;
36528     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
36529     +                            put string;
36530     +                            string = tranwrd(origLabel,"'","''");
36531     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
36532     +                            put string;
36533     +                      end;
36534     +                      else do;
36535     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
36536     +                             put string;
36537     +                      end;
36539     +                      put ' ';
36541     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
36542     +                      put string;
36543     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
36544     +                      put string;
36545     +                      put "end;";
36546     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
36547     +                      put string;
36548     +                   end;
36549     +                   if first._group_ then do;
36550     +                      flag = 0;
36551     +                      endflag = 1;
36552     +                      if ^first._variable_ then do;
36553     +                         put "else";
36554     +                      end;
36555     +                      if LB ne . then do;
36556     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
36557     +                      end;
36558     +                      else do;
36559     +                         flag = 1;
36560     +                         string = "if";
36561     +                      end;
36562     +                   end;
36563     +                   if last._Group_ then do;
36564     +                      if UB ne . then do;
36565     +                        if flag ne 1 then do;
36566     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
36567     +                        end;
36568     +                        else do;
36569     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
36570     +                        end;
36571     +                      end;
36572     +                      else do;
36573     +                         if flag=1 then do;
36574     +                            string = strip(DISPLAY_VAR) ;
36575     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
36576     +                            endflag=0;
36577     +                            string="";
36578     +                         end;
36579     +                         else do;
36580     +                            string = strip(string)!!" then do;";
36581     +                         end;
36582     +                      end;
36583     +                      put string;
36584     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
36585     +                      put string;
36586     +                      if endflag eq 1 then do;
36587     +                        put "end;";
36588     +                      end;
36589     +                   end;
36590     +                   if last._variable_ then do;
36591     +                     string = "end;";
36592     +                     put string;
36593     +                   end;
36595     +                end;
36596     +                else do;
36597     +                   _split_value_ = tranwrd(_split_value_,"'","''");
36598     +                   if first._group_ then do;
36599     +                      flag=0;
36600     +                      if ^first._variable_ then
36601     +                         put 'else';
36602     +                      else do;
36603     +                         put ' ';
36604     +                         put "&EM_CODEBAR;";
36605     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
36606     +                         put string;
36607     +                         put "&EM_CODEBAR;";
36609     +                         if origLabel ne "" then do;
36610     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
36611     +                               put string;
36612     +                               string = tranwrd(origLabel,"'","''");
36613     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
36614     +                               put string;
36615     +                         end;
36616     +                         else do;
36617     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
36618     +                               put string;
36619     +                         end;
36621     +                         put ' ';
36623     +                         if format ne '' then do;
36624     +                            if first._variable_ then do;
36625     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
36626     +                               put string;
36627     +                               string = '%dmnormip(_UFormat);';
36628     +                               put string;
36630     +                               string ="if MISSING(_UFORMAT) then do;";
36631     +                               put string;
36632     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
36633     +                               put string;
36634     +                               put "end;";
36636     +                               string="else if NOT MISSING(_UFORMAT) then do;";
36637     +                               put string;
36639     +                            end;
36640     +                         end;
36641     +                         else do;
36642     +                            if type = 'N' then do;
36643     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
36644     +                              put string;
36645     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
36646     +                              put string;
36647     +                              put "end;";
36649     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
36650     +                              put string;
36651     +                            end;
36652     +                            else if type='C' then do;
36653     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
36654     +                              put string;
36655     +                              string = '%dmnormip(_UFormat);';
36656     +                              put string;
36658     +                              string ="if MISSING(_UFORMAT) then do;";
36659     +                              put string;
36660     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
36661     +                              put string;
36662     +                              put "end;";
36664     +                              string="else if NOT MISSING(_UFORMAT) then do;";
36665     +                              put string;
36666     +                              string = '%dmnormip(_UFormat);';
36667     +                              put string;
36668     +                           end;
36669     +                         end;
36670     +                      end;
36671     +                      if format ne '' OR type='C' then do;
36672     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
36673     +                      end;
36674     +                      else do;
36675     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
36676     +                      end;
36677     +                   end;
36678     +                   else do;
36679     +                      if flag ne 1 then do;
36680     +                       if format ne '' OR type='C' then do;
36681     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
36682     +                       end;
36683     +                       else do;
36684     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
36685     +                       end;
36686     +                         length = length(tempstring);
36688     +                         if length < 195 then do;
36689     +                            string = tempstring;
36690     +                         end;
36691     +                         else do;
36693     +                            string = strip(string);
36694     +                            put string;
36695     +                            string = ") then do;";
36696     +                            put string;
36698     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
36699     +                            put string;
36700     +                            put "end;";
36702     +                            put 'else';
36703     +                            if format ne '' OR type='C' then do;
36704     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
36705     +                            end;
36706     +                            else do;
36707     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
36708     +                            end;
36709     +                         end;
36710     +                      end;
36711     +                   end;
36713     +                   if last._group_ then do;
36714     +                      string = strip(string);
36715     +                      put string;
36717     +                      string = ") then do;";
36718     +                      put string;
36720     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
36721     +                      put string;
36722     +                      put "end;";
36723     +                   end;
36725     +                   if last._variable_ then do;
36726     +                     put "else do;";
36728     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
36729     +                     put string;
36731     +                     put "end;";
36732     +                     put "end;";
36733     +                   end;
36734     +                end;
36735     +             run;
36737     +             %let oldname = &name;
36738     +        %end;
36739     +    %end;
36740     +    %let dsid = %sysfunc(close(&dsid));
36742     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
36743     +    data _null_;
36744     +       file _F1;
36745     +       put "length _UFormat $200;";
36746     +       put "drop _UFormat;";
36747     +       put "_UFormat='';";
36748     +    run;
36749     +    filename _F1;
36751     +   %em_register(key=EMSCOREVAR, type=DATA);
36752     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
36753     +   proc datasets lib=&em_lib nolist;
36754     +      delete &scorevarDs;
36755     +   run;
36756     +   quit;
36758     +   %let filrf=mydir;
36759     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
36760     +   %let did=%sysfunc(dopen(&filrf));
36762     +   %if &did %then %do;  %PUT  did= &did;
36763     +       %let memcount=%sysfunc(dnum(&did));
36764     +       %if &memcount > 0 %then %do;
36765     +           data &em_user_emscorevar;
36766     +              length Name $32 formula $70 file $200;
36767     +              keep NAME Formula file;
36768     +              formula  = '';
36769     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
36770     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
36771     +               output;
36772     +           %end;
36773     +           %do i=1 %to &memcount;
36774     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
36775     +               %let newvar = %scan(&name, 1, .);
36776     +               %if "&newvar" ne "_ALL_" %then %do;
36777     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
36778     +                   output;
36779     +               %end;
36780     +           %end;
36782     +           run;
36783     +       %end;
36784     +       %let did = %sysfunc(dclose(&did));
36785     +  %end;
36787     +   %doendu:
36788     +%mend buildOptScoreCode;
36791     +%macro buildScoreCode(flowCode, publishCode);
36794     +  filename x "&flowCode";
36796     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
36797     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
36798     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
36800     +  data temp;
36801     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
36802     +    by display_var _Split_value_;
36803     +     if upcase(_Split_value_) ne 'MISSING';
36804     +   run;
36806     +   data temp_missing;
36807     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
36808     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
36809     +     by display_var _Split_value_;
36810     +     if upcase(_Split_value_) eq 'MISSING';
36811     +     keep _variable_ display_var missgrp;
36812     +   run;
36814     +   proc sort data=temp_missing; by display_var missgrp; run;
36816     +   data temp_missing;
36817     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
36818     +     by display_var missgrp;
36819     +     if ^_a then delete;
36820     +     keep _variable_ display_var missgrp ;
36821     +   run;
36823     +   data temp;
36824     +     merge temp temp_missing;
36825     +     by display_var;
36826     +     if display_Var eq '' then delete;
36827     +    run;
36829     +    /* pull in wtev values */
36830     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
36831     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
36832     +    proc sort data=temp;  by display_var _group_; run;
36834     +   data temp;
36835     +      merge temp tempcoarse(keep=display_var _group_  role) ;
36836     +      by display_var _group_;
36837     +    run;
36839     +    data temp;
36840     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
36841     +      by display_var;
36843     +      if _group_ = . then delete;
36844     +      if _variable_ = '' then delete;
36845     +    run;
36847     +    proc sort data=temp out=class;
36848     +       by _variable_ _group_ LB;
36849     +    run;
36851     +    data _null_;
36852     +      file X;
36854     +      put "length _UFormat $200;";
36855     +      put "drop _UFormat;";
36856     +      put "_UFormat='';";
36857     +    run;
36859     +    data class_nosv;
36860     +      set class;
36861     +      if upcase(role)="INPUT";
36862     +    run;
36864     +    data _null_;
36865     +       file X MOD;
36866     +       length string $200 flag endflag 8;
36867     +       retain string flag endflag;
36868     +       set class_nosv end=eof;
36869     +       by _variable_ _group_;
36871     +       index = kindex(_variable_, "BIN_");
36872     +       if index gt 0 then do;
36874     +         if first._variable_ then do;
36875     +            put ' ';
36876     +            put "&EM_CODEBAR;";
36877     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
36878     +            put string;
36879     +            put "&EM_CODEBAR;";
36882     +            if origLabel ne "" then do;
36883     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
36884     +              put string;
36885     +              string = tranwrd(origLabel,"'","''");
36886     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
36887     +              put string;
36888     +            end;
36889     +            else do;
36890     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
36891     +             put string;
36892     +            end;
36894     +            put ' ';
36896     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
36897     +            put string;
36898     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
36899     +            put string;
36900     +            put "end;";
36901     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
36902     +            put string;
36903     +          end;
36904     +           if first._group_ then do;
36905     +              flag = 0;
36906     +              endflag = 1;
36907     +              if ^first._variable_ then do;
36908     +                put "else";
36909     +              end;
36910     +              if LB ne . then do;
36911     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
36912     +              end;
36913     +              else do;
36914     +                 flag = 1;
36915     +                 string = "if";
36916     +              end;
36918     +           end;
36919     +           if last._Group_ then do;
36920     +              if UB ne . then do;
36921     +                if flag ne 1 then do;
36922     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
36923     +                end;
36924     +                else do;
36925     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
36926     +                end;
36927     +              end;
36928     +              else do;
36929     +                 if flag=1 then do;
36930     +                   string = strip(DISPLAY_VAR) ;
36931     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
36932     +                   endflag = 0;
36933     +                   string="";
36934     +                 end;
36935     +                 else do;
36936     +                   string = strip(string)!!" then do;";
36937     +                 end;
36938     +              end;
36939     +              put string;
36941     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
36942     +              put string;
36943     +              if endflag eq 1 then do;
36944     +                put "end;";
36945     +              end;
36946     +           end;
36947     +           if last._variable_ then do;
36948     +             string = "end;";
36949     +             put string;
36950     +           end;
36951     +       end;
36952     +       else do;
36953     +           _split_value_ = tranwrd(_split_value_,"'","''");
36954     +           if first._group_ then do;
36955     +              flag=0;
36956     +              if ^first._variable_ then
36957     +                 put 'else';
36958     +              else do;
36959     +                 put ' ';
36960     +                 put "&EM_CODEBAR;";
36961     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
36962     +                 put string;
36963     +                 put "&EM_CODEBAR;";
36965     +                 if origLabel ne "" then do;
36966     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
36967     +                   put string;
36968     +                   string = tranwrd(origLabel,"'","''");
36969     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
36970     +                   put string;
36971     +                 end;
36972     +                 else do;
36973     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
36974     +                   put string;
36975     +                 end;
36977     +                 put ' ';
36979     +                if format ne '' then do;
36980     +                  if first._variable_ then do;
36981     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
36982     +                    put string;
36983     +                    string = '%dmnormip(_UFormat);';
36984     +                    put string;
36986     +                     string ="if MISSING(_UFORMAT) then do;";
36987     +                     put string;
36988     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
36989     +                     put string;
36990     +                     put "end;";
36992     +                     string="else if NOT MISSING(_UFORMAT) then do;";
36993     +                     put string;
36995     +                  end;
36996     +                end;
36997     +                else do;
36998     +                     if type = 'N' then do;
36999     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
37000     +                       put string;
37001     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
37002     +                       put string;
37003     +                       put "end;";
37005     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
37006     +                       put string;
37008     +                     end;
37009     +                     else if type='C' then do;
37010     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
37011     +                        put string;
37012     +                        string = '%dmnormip(_UFormat);';
37013     +                        put string;
37015     +                        string ="if MISSING(_UFORMAT) then do;";
37016     +                        put string;
37017     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
37018     +                        put string;
37019     +                        put "end;";
37021     +                        string="else if NOT MISSING(_UFORMAT) then do;";
37022     +                        put string;
37023     +                        string = '%dmnormip(_UFormat);';
37024     +                        put string;
37025     +                    end;
37026     +                end;
37027     +              end;
37028     +              if format ne '' OR type='C' then do;
37029     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
37030     +              end;
37031     +              else do;
37032     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
37033     +              end;
37034     +           end;
37035     +           else do;
37036     +              if flag ne 1 then do;
37037     +                if format ne '' OR type='C' then do;
37038     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
37039     +                end;
37040     +                else do;
37041     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
37042     +                end;
37043     +                length = klength(tempstring);
37045     +                if length < 195 then do;
37046     +                   string = tempstring;
37047     +                end;
37048     +                else do;
37050     +                   string = strip(string);
37051     +                   put string;
37052     +                   string = ") then do;";
37053     +                   put string;
37055     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
37056     +                   put string;
37057     +                   put "end;";
37059     +                 /*  string = strip(string)||",'...';"; */
37061     +                   put 'else';
37062     +                   if format ne '' OR type='C' then do;
37063     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
37064     +                   end;
37065     +                   else do;
37066     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
37067     +                   end;
37070     +                end;
37071     +              end;
37072     +           end;
37074     +           if last._group_ then do;
37075     +              string = strip(string);
37076     +              put string;
37077     +              string = ") then do;";
37078     +              put string;
37080     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
37081     +              put string;
37082     +              put "end;";
37083     +           end;
37085     +           if last._variable_ then do;
37086     +             put "else do;";
37088     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
37089     +             put string;
37091     +             put "end;";
37092     +             put "end;";
37093     +           end;
37094     +         *end;
37095     +       end;
37096     +    run;
37098     +    /* generate PublishCode the same as flowscorecode */
37099     +    filename Y "&publishCode";
37101     +    /* if publishCode already exists, wipe it out first */
37102     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
37103     +      %let rc = %sysfunc(fdelete(Y));
37104     +    %end;
37106     +    %appendfiles(Y, X);
37108     +    %if %EM_BINARY_TARGET= %then %do;
37109     +      %if %symexist(EM_NUM_INTERVAL_TARGET)=0 %then %do;
37110     +         %em_varMacro(name=EM_INTERVAL_TARGET, metadata=&EM_DATA_variableSet, where=%nrbquote(ROLE="TARGET" and LEVEL="INTERVAL" and (USE="Y" or USE="D")), nummacro=em_num_interval_Target);
37111     +      %end;
37112     +      %let ibn_inttarget=%EM_INTERVAL_TARGET;
37113     +      %let ibn_inttarget_orig = &ibn_inttarget;
37115     +      %if %symexist(IGNBinTarget)=0 %then %do;
37116     +         %global ignbintarget ignfreqvar;
37117     +         filename temp catalog 'sashelp.emutil.em_getvarname.source';
37118     +         %include temp;
37119     +         filename temp;
37120     +         %getVarName(&EM_IMPORT_DATA, BIN_%substr(&ibn_inttarget,1,%sysfunc(min(%length(&ibn_inttarget),28))), IGNBinTarget);
37122     +         %if &EM_PROPERTY_INTTARGETMETHOD = DUPFREQ %then %do;
37123     +            %getVarName(&EM_IMPORT_DATA, _FREQ_, ignfreqvar);
37124     +         %end;
37125     +      %end;
37126     +      %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
37127     +         proc sql noprint;
37128     +            %if %EM_FREQ ne %then %do;
37129     +               select sum(&ibn_inttarget * %EM_FREQ) / sum(%EM_FREQ)
37130     +            %end;
37131     +            %else %do;
37132     +               select mean(&ibn_inttarget)
37133     +            %end;
37134     +            into :ignbincut trimmed from &EM_IMPORT_DATA;
37135     +         quit;
37136     +      %end;
37138     +      %let dsid=%sysfunc(open(&EM_IMPORT_DATA,i));
37139     +      %if &dsid %then %do;
37140     +         %let tarlabel=%trim(%sysfunc(varlabel(&dsid,%sysfunc(varnum(&dsid,&ibn_inttarget)))));
37141     +         %let rc=%sysfunc(close(&dsid));
37142     +      %end;
37143     +      %if %length(&tarlabel)=0 %then %let tarlabel = &ibn_inttarget;
37145     +      data _null_;
37146     +         file x mod;
37147     +         put ' ';
37149     +         %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
37150     +             put "&EM_CODEBAR;";
37151     +             %let note = Mean Cutoff Binary Transformation for Target;
37152     +             put "* &note;";
37153     +             put "&EM_CODEBAR;";
37154     +         %end;
37155     +         %else %if &EM_PROPERTY_INTTARGETMETHOD = CUTUSER %then %do;
37156     +             put "&EM_CODEBAR;";
37157     +             %let note = User-Specified Cutoff Binary Transformation for Target;
37158     +             put "* &note;";
37159     +             put "&EM_CODEBAR;";
37160     +             %let ignbincut = &EM_PROPERTY_USERCUTVALUE;
37161     +         %end;
37162     +         put "if &ibn_inttarget = . then &IGNBinTarget = .;";
37163     +         put "else do;";
37164     +         put "   if &ibn_inttarget > &ignbincut then &IGNBinTarget=1;";
37165     +         put "   else &IGNBinTarget=0;";
37166     +         put "end;";
37168     +         put "label &IGNBinTarget = 'Binary: %nrbquote(%substr(&tarlabel,1,192))';";
37169     +      run;
37171     +      filename deltaref "&EM_FILE_CDELTA_TRAIN";
37173     +      %if &EM_PROPERTY_RejectIntTarget = Y %then %do;
37175     +         data _null_;
37176     +            file deltaref;
37177     +            put "if name='&ibn_inttarget_orig' then role='REJECTED';";
37178     +            put "if name='&IGNBinTarget' then do;";
37179     +            put "   role='TARGET';";
37180     +            put "   level='BINARY';";
37181     +            put "end;";
37182     +         run;
37184     +      %end;
37185     +      %else %do;
37187     +         data _null_;
37188     +            file deltaref;
37189     +            put "if name='&ibn_inttarget_orig' then role='TARGET';";
37190     +            put "if name='&IGNBinTarget' then do;";
37191     +            put "   role='REJECTED';";
37192     +            put "   level='BINARY';";
37193     +            put "end;";
37194     +         run;
37195     +      %end;
37197     +      filename deltaref;
37199     +   %end;
37201     +    filename X;
37202     +    filename Y;
37204     +    %buildOptScoreCode;
37206     +    proc datasets library=work nolist;
37207     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
37208     +    run;
37209     +    quit;
37211     +%mend buildScoreCode;
37213     +%macro buildMetaCode(DeltaCodeFile=);
37215     +   /* set variable roles based on New Role column in the Results table */
37216     +   data _null_;
37217     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
37218     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
37219     +      %if &dsid %then %do;
37220     +        %let obs = %sysfunc(fetch(&dsid));
37221     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
37222     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
37223     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
37225     +        %do %while(&obs=0);
37226     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
37227     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
37228     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
37230     +          /* retrieve grp and woe names from varmappings dataset */
37231     +          %let choice = _VARIABLE_ = "&inputname";
37232     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
37233     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
37234     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
37235     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
37236     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
37238     +          put "if name = '&inputname' then role='REJECTED';";
37239     +          %if "&role" ne "DEFAULT" %then %do;
37240     +            put "if name = '&grpname' then role='&role';";
37241     +          %end;
37242     +          %else %do;
37243     +            put "if name = '&grpname' then role='&oldrole';";
37244     +          %end;
37245     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
37247     +          %let obs = %sysfunc(fetch(&dsid));
37248     +        %end;
37249     +      %end;
37250     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
37251     +   run;
37253     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
37254     +   data _null_;
37255     +      file &DeltaCodeFile MOD;
37257     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
37258     +      %if &sdsid %then %do;
37259     +        %let sobs = %sysfunc(fetch(&sdsid));
37260     +        %do %while(&sobs=0);
37261     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
37262     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
37263     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
37264     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
37266     +          %let checkgrp = GRP_&checkname;
37267     +          %let lenname = %length(&checkgrp);
37268     +          %if %eval(&lenname-32) > 0 %then %do;
37269     +            %let checkgrp = %substr(&checkgrp, 1, 32);
37270     +          %end;
37272     +          %let choice = _VARIABLE_ ="&checkname";
37273     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
37275     +          /* if var not found in varmappings, delete variables; */
37276     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
37277     +          %if &vdsid eq 0 %then %do;
37278     +            put 'if name="&displayvar" then delete;';
37279     +            %let dispgrp = GRP_&displayvar;
37280     +            put 'if name="&dispgrp" then delete;';
37281     +          %end;
37283     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
37284     +          %let sobs = %sysfunc(fetch(&sdsid));
37285     +        %end;
37286     +      %end;
37287     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
37288     +   run;
37290     +%mend buildMetaCode;
37292     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
37294     +   proc sort data=&coarse out=sortedcoarse nodupkey;
37295     +     by display_var;
37296     +   run;
37297     +   proc sort data=&varmappings nodupkey;
37298     +     by _variable_;
37299     +   run;
37300     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
37301     +     proc sort data=&resultstable; by display_var; run;
37303     +     /* check that _new_role exists - did not exist in earlier releases */
37304     +     %let rds=%sysfunc(open(&resultstable));
37305     +     %let _newrolenum = %sysfunc(VARNUM(&rds, _new_role_));
37306     +     %let rds=%sysfunc(close(&rds));
37307     +   %end;
37309     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
37310     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
37311     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
37312     +        &resultstable (keep = display_var %if &_newrolenum %then _new_role_; )
37313     +     %end;
37314     +     ;
37315     +     by display_var;
37316     +     length _role_ _new_role_ $10;
37317     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
37318     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
37319     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_calcrole_vlabel, NOQUOTE))"
37320     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
37321     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
37322     +           ;
37324     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
37325     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
37326     +                _role_ = "Rejected";
37327     +             else _role_ = "Input";
37328     +           %end;
37329     +           %else %do;
37330     +             _role_ = "Input";
37331     +           %end;
37332     +           if _new_role_ eq "" then _new_role_="Default";
37333     +      if ^_a then do;
37334     +        _gini_ = 0;
37335     +        _role_ = 'Rejected';
37336     +        if _new_role_ eq "" then _new_role_="Default";
37337     +      end;
37338     +   run;
37339     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
37340     +     by NAME;
37341     +   run;
37342     +   data outlabel;
37343     +     set outlabel;
37344     +     if _label_ = '' then _label_ = _variable_;
37345     +   run;
37346     +   data &resultstable;
37347     +     merge &resultstable(in=_a_) outlabel;
37348     +     by display_Var;
37349     +     if _a_ then output;
37350     +   run;
37351     +   proc datasets library=work nolist;
37352     +     delete sortedcoarse outlabel;
37353     +   run;
37354     +   quit;
37355     +   proc sort data=&resultstable nodupkey;
37356     +      by DESCENDING
37357     +        _gini_ display_Var;
37358     +   run;
37359     +   data &resultstable;
37360     +     set &resultstable;
37362     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
37363     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
37364     +     giniOrder = _N_;
37365     +     _gini_ = round(_GINI_, .001);
37366     +     drop _variable_;
37367     +   run;
37369     +   proc print data=&resultstable label;
37370     +   run;
37372     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
37373     +   data &coarse;
37374     +     set &coarse;
37375     +     length role $10;
37376     +     %let dsid = %sysfunc(open(&resultstable));
37377     +     %if &dsid %then %do;
37378     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
37379     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
37380     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
37382     +       %let obs = %sysfunc(fetch(&dsid));
37383     +       %do %while(&obs=0);
37384     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
37385     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
37386     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
37388     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
37389     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
37390     +            giniOrder = &order;
37391     +            role = "&role";
37392     +          end;
37394     +          %let obs = %sysfunc(fetch(&dsid));
37395     +       %end;
37396     +     %end;
37397     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
37398     +   run;
37401     +%mend EM_GENERATE_RESULTSTABLE;
37403     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
37405     +    /* instantiate the zchar macro to be used in adding bin definition */
37406     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
37407     +    %inc _temp;
37408     +    filename _temp;
37410     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
37411     +      by _variable_ binFlag _group_ LB;
37412     +    run;
37414     +    data tempExport;
37415     +      set sortedFine;
37416     +      by _variable_ binFlag _group_;
37417     +      length _split_value_ $200;
37419     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
37420     +      if binFlag = 0 then do;
37421     +        index = kindex(_variable_, "BIN_");
37422     +        if index gt 0 then do;
37423     +          _LEVEL_ = "INTERVAL";
37424     +        end;
37425     +        _Split_value_ = _split_value_;
37426     +        output;
37427     +      end;
37428     +      else do;
37429     +         * if last._group_ then do;
37430     +          index = kindex(_variable_, "BIN_");
37431     +          if index gt 0 then do;
37432     +            _LEVEL_ = "INTERVAL";
37433     +          end;
37434     +          _Split_value_ = %zchar(UB);
37435     +          output;
37436     +         * end;
37437     +      end;
37439     +      rename display_Var = _variable_;
37440     +      keep display_var _level_ _group_ _split_value_ binFlag;
37441     +    run;
37443     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
37444     +       data &EXPORTGROUPING;
37445     +         set tempexport;
37446     +       run;
37447     +    %end;
37448     +    %else %do;
37449     +       /* determine if EXPORTGROUPING already exists */
37450     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
37451     +         data &EXPORTGROUPING;
37452     +            set &EXPORTGROUPING tempexport;
37453     +         run;
37454     +       %end;
37455     +       %else %do;
37456     +         data &EXPORTGROUPING;
37457     +            set tempexport;
37458     +         run;
37459     +       %end;
37460     +    %end;
37462     +    proc datasets lib=work nolist;
37463     +      delete sortedFine tempexport;
37464     +    run;
37465     +    quit;
37467     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_REPORT.SOURCE.
37471     +
37472     +%macro report;
37473     +
37474     +   /* if createGrouping then create a dataset for export */
37475     +   %EM_GETNAME(key=EXPORTGROUP, type=DATA);
37476     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
37477     +   %if &EM_PROPERTY_CREATEGROUPING eq Y %then %do;
37478     +     %EM_GENERATE_EXPORTGROUP(&EM_USER_EXPORTGROUP, &EM_PROPERTY_CREATEMETHOD);
37479     +   %end;
37480     +   %else %do;
37481     +     proc datasets library=&EM_LIB nolist;
37482     +       delete &EM_NODEID._EXPORTGROUP;
37483     +     run;
37484     +     quit;
37485     +   %end;
37486     +
37487     +
37488     +   /* set where clause dependent on EM_PROPERTY_MAXVAR value */
37489     +   %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
37490     +     %let whereclause = ((_GINI_ >= &EM_PROPERTY_GINICUTOFF) & (GINIORDER <= &EM_PROPERTY_MAXVAR));
37491     +   %end;
37492     +   %else %do;
37493     +     %let whereclause = GINIORDER <= &EM_PROPERTY_MAXVAR;
37494     +   %end;
37495     +
37496     +   %EM_REPORT(KEY=COARSE, VIEWTYPE=LATTICE, LATTICETYPE=BAR, X=_GROUP_, Y=EVENTRATE,
37497     +              BLOCK=MODEL, TIPTEXT=_LABEL_, LATTICEX=DISPLAY_VAR, DESCRIPTION=EVENTRATE, autodisplay=Y, where=%nrbquote(&whereclause));
37498     +
37499     +
37500     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets library=EMWS1 nolist;
MPRINT(REPORT):   delete BINNING_EXPORTGROUP;
MPRINT(REPORT):   run;

NOTE: The file EMWS1.BINNING_EXPORTGROUP (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(REPORT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.78 seconds
      cpu time            0.18 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "((_GINI_ >= 20) & (GINIORDER <= 10))";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_GROUP_";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_LABEL_";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
The SAS System

MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.14889379364852;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 134 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37501      *------------------------------------------------------------*;
37502      * End REPORT: BINNING;
37503      *------------------------------------------------------------*;
37504      

37505      /* Reset EM Options */
37506      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
37507      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
37508      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
37509      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
37510      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
37511      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 134 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 134 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
