MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 07, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "21:37:33" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 07, 2018
Time:                21:37:33
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O359C_GQ "J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O359C_GQ new;
MPRINT(EM_DIAGRAM):   run;
21530      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
21531      set EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_OUTKEY;
21532      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
21533      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set EMWS1.NEURAL_OUTKEY.
NOTE: The data set WORK.OUTKEY has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

21534      filename emflow "J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21535      *------------------------------------------------------------*;
21536      * Neural: Scoring DATA data;
21537      *------------------------------------------------------------*;
21538      data EMWS1.Neural_TRAIN
21539      / view=EMWS1.Neural_TRAIN
21540      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_TRAIN / view=EMWS1.Neural_TRAIN ;
21541      set EMWS1.Impt_TRAIN
21542      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_TRAIN ;
21543      %inc emflow;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_BAD $ 12 ;
MPRINT(EM_DIAGRAM):   label S_IMP_CLAGE = 'Standard: IMP_CLAGE' ;
MPRINT(EM_DIAGRAM):   label S_IMP_CLNO = 'Standard: IMP_CLNO' ;
MPRINT(EM_DIAGRAM):   label S_IMP_DEBTINC = 'Standard: IMP_DEBTINC' ;
MPRINT(EM_DIAGRAM):   label S_IMP_DELINQ = 'Standard: IMP_DELINQ' ;
MPRINT(EM_DIAGRAM):   label S_IMP_DEROG = 'Standard: IMP_DEROG' ;
MPRINT(EM_DIAGRAM):   label S_IMP_MORTDUE = 'Standard: IMP_MORTDUE' ;
MPRINT(EM_DIAGRAM):   label S_IMP_NINQ = 'Standard: IMP_NINQ' ;
MPRINT(EM_DIAGRAM):   label S_IMP_VALUE = 'Standard: IMP_VALUE' ;
MPRINT(EM_DIAGRAM):   label S_IMP_YOJ = 'Standard: IMP_YOJ' ;
MPRINT(EM_DIAGRAM):   label S_LOAN = 'Standard: LOAN' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBMgr = 'Dummy: IMP_JOB=Mgr' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBOffice = 'Dummy: IMP_JOB=Office' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBOther = 'Dummy: IMP_JOB=Other' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBProfExe = 'Dummy: IMP_JOB=ProfExe' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBSales = 'Dummy: IMP_JOB=Sales' ;
MPRINT(EM_DIAGRAM):   label IMP_REASONDebtCon = 'Dummy: IMP_REASON=DebtCon' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_JOB ;
MPRINT(EM_DIAGRAM):   drop IMP_JOBMgr IMP_JOBOffice IMP_JOBOther IMP_JOBProfExe IMP_JOBSales ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   IMP_JOBMgr = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBOffice = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBOther = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBProfExe = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBSales = 0;
MPRINT(EM_DIAGRAM):   if missing( IMP_JOB ) then do;
MPRINT(EM_DIAGRAM):   IMP_JOBMgr = .;
MPRINT(EM_DIAGRAM):   IMP_JOBOffice = .;
MPRINT(EM_DIAGRAM):   IMP_JOBOther = .;
MPRINT(EM_DIAGRAM):   IMP_JOBProfExe = .;
MPRINT(EM_DIAGRAM):   IMP_JOBSales = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_JOB,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OTHER' then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OFFICE' then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'MGR' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBMgr = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OFFICE' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBOffice = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OTHER' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBOther = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'SALES' then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'PROFEXE' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBProfExe = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SALES' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBSales = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SELF' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBMgr = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBOffice = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBOther = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBProfExe = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBSales = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   IMP_JOBMgr = .;
MPRINT(EM_DIAGRAM):   IMP_JOBOffice = .;
MPRINT(EM_DIAGRAM):   IMP_JOBOther = .;
MPRINT(EM_DIAGRAM):   IMP_JOBProfExe = .;
MPRINT(EM_DIAGRAM):   IMP_JOBSales = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_REASON ;
MPRINT(EM_DIAGRAM):   drop IMP_REASONDebtCon ;
MPRINT(EM_DIAGRAM):   if missing( IMP_REASON ) then do;
MPRINT(EM_DIAGRAM):   IMP_REASONDebtCon = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_REASON,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm7 = 'DEBTCON' then do;
MPRINT(EM_DIAGRAM):   IMP_REASONDebtCon = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'HOMEIMP' then do;
MPRINT(EM_DIAGRAM):   IMP_REASONDebtCon = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   IMP_REASONDebtCon = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
MPRINT(EM_DIAGRAM):   IF NMISS( IMP_CLAGE , IMP_CLNO , IMP_DEBTINC , IMP_DELINQ , IMP_DEROG , IMP_MORTDUE , IMP_NINQ , IMP_VALUE , IMP_YOJ , LOAN ) THEN DO;
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_IMP_CLAGE = -2.1324986323703 + 0.01177180625915 * IMP_CLAGE ;
MPRINT(EM_DIAGRAM):   S_IMP_CLNO = -2.11100475843317 + 0.09921497033636 * IMP_CLNO ;
MPRINT(EM_DIAGRAM):   S_IMP_DEBTINC = -4.21130359350115 + 0.12464292126092 * IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   S_IMP_DELINQ = -0.40381023676556 + 0.87362166360406 * IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   S_IMP_DEROG = -0.31573464531037 + 1.31032371760165 * IMP_DEROG ;
MPRINT(EM_DIAGRAM):   S_IMP_MORTDUE = -1.76062130304699 + 0.000023929645 * IMP_MORTDUE ;
MPRINT(EM_DIAGRAM):   S_IMP_NINQ = -0.7098195299189 + 0.61350782376294 * IMP_NINQ ;
MPRINT(EM_DIAGRAM):   S_IMP_VALUE = -1.78391262611731 + 0.00001740731711 * IMP_VALUE ;
MPRINT(EM_DIAGRAM):   S_IMP_YOJ = -1.21374892345752 + 0.13686286372334 * IMP_YOJ ;
MPRINT(EM_DIAGRAM):   S_LOAN = -1.61848713271866 + 0.00008662382017 * LOAN ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_CLAGE ) THEN S_IMP_CLAGE = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_CLAGE = -2.1324986323703 + 0.01177180625915 * IMP_CLAGE ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_CLNO ) THEN S_IMP_CLNO = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_CLNO = -2.11100475843317 + 0.09921497033636 * IMP_CLNO ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_DEBTINC ) THEN S_IMP_DEBTINC = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_DEBTINC = -4.21130359350115 + 0.12464292126092 * IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_DELINQ ) THEN S_IMP_DELINQ = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_DELINQ = -0.40381023676556 + 0.87362166360406 * IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_DEROG ) THEN S_IMP_DEROG = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_DEROG = -0.31573464531037 + 1.31032371760165 * IMP_DEROG ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_MORTDUE ) THEN S_IMP_MORTDUE = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_MORTDUE = -1.76062130304699 + 0.000023929645 * IMP_MORTDUE ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_NINQ ) THEN S_IMP_NINQ = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_NINQ = -0.7098195299189 + 0.61350782376294 * IMP_NINQ ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_VALUE ) THEN S_IMP_VALUE = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_VALUE = -1.78391262611731 + 0.00001740731711 * IMP_VALUE ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_YOJ ) THEN S_IMP_YOJ = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_YOJ = -1.21374892345752 + 0.13686286372334 * IMP_YOJ ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOAN ) THEN S_LOAN = . ;
MPRINT(EM_DIAGRAM):   ELSE S_LOAN = -1.61848713271866 + 0.00008662382017 * LOAN ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   H11 = -0.3017685934797 * S_IMP_CLAGE + 0.67772949919122 * S_IMP_CLNO + 1.76051663874502 * S_IMP_DEBTINC + -0.65992402913565 * S_IMP_DELINQ + -0.15181813253071 * S_IMP_DEROG + -1.79029417231507 * S_IMP_MORTDUE + 0.24427099035887 * 
S_IMP_NINQ + -0.30784019328387 * S_IMP_VALUE + 0.30919279018697 * S_IMP_YOJ + -1.36621980628412 * S_LOAN ;
MPRINT(EM_DIAGRAM):   H12 = 0.53032845652514 * S_IMP_CLAGE + -0.6366888643195 * S_IMP_CLNO + -2.11121456050444 * S_IMP_DEBTINC + -0.33363860643462 * S_IMP_DELINQ + -0.49654770617387 * S_IMP_DEROG + 0.54802157324604 * S_IMP_MORTDUE + 0.19264598572389 * 
S_IMP_NINQ + -0.70679349346154 * S_IMP_VALUE + 0.04196782023788 * S_IMP_YOJ + -0.13099188649286 * S_LOAN ;
MPRINT(EM_DIAGRAM):   H13 = 0.00282582710473 * S_IMP_CLAGE + -0.21028500798803 * S_IMP_CLNO + -0.27051241464249 * S_IMP_DEBTINC + 0.24366734922767 * S_IMP_DELINQ + 0.21891207401132 * S_IMP_DEROG + 0.03701087979685 * S_IMP_MORTDUE + 0.21915275016511 * 
S_IMP_NINQ + -0.04369416010243 * S_IMP_VALUE + -0.17301384533761 * S_IMP_YOJ + 0.01947031689577 * S_LOAN ;
MPRINT(EM_DIAGRAM):   H14 = 0.04010002145966 * S_IMP_CLAGE + 0.08574567871774 * S_IMP_CLNO + -6.36519240230978 * S_IMP_DEBTINC + -0.425151531904 * S_IMP_DELINQ + 0.11691737767998 * S_IMP_DEROG + -0.16947255553468 * S_IMP_MORTDUE + -0.02109707338782 * 
S_IMP_NINQ + -0.12397227771815 * S_IMP_VALUE + 0.43675659396117 * S_IMP_YOJ + 0.18758746301175 * S_LOAN ;
MPRINT(EM_DIAGRAM):   H15 = -0.17934176462643 * S_IMP_CLAGE + -0.01062194946191 * S_IMP_CLNO + -1.75865848996631 * S_IMP_DEBTINC + 0.09613525018482 * S_IMP_DELINQ + -0.15479861612447 * S_IMP_DEROG + 0.10444549762751 * S_IMP_MORTDUE + -0.34687139614226 * 
S_IMP_NINQ + 0.24992785705303 * S_IMP_VALUE + 0.41396843324218 * S_IMP_YOJ + 0.09779538177636 * S_LOAN ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -1.67330879776938 * IMP_JOBMgr + 0.16757057064923 * IMP_JOBOffice + 0.13267750511725 * IMP_JOBOther + 0.74047662930496 * IMP_JOBProfExe + -1.31104464424448 * IMP_JOBSales + 0.79923737744783 * IMP_REASONDebtCon ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.13613566163595 * IMP_JOBMgr + 1.59365591845688 * IMP_JOBOffice + 0.67801461800597 * IMP_JOBOther + 0.19181681974747 * IMP_JOBProfExe + -2.25621146050576 * IMP_JOBSales + -0.29828277287433 * IMP_REASONDebtCon ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.16332920963777 * IMP_JOBMgr + -0.14886049408019 * IMP_JOBOffice + 0.06719478570477 * IMP_JOBOther + -0.11353875863583 * IMP_JOBProfExe + -0.19181249110526 * IMP_JOBSales + 0.11663097049024 * IMP_REASONDebtCon ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 1.05690784634804 * IMP_JOBMgr + -0.27851507675832 * IMP_JOBOffice + 0.3102236813451 * IMP_JOBOther + -0.25632191644424 * IMP_JOBProfExe + -0.86625235533524 * IMP_JOBSales + 0.08527855605787 * IMP_REASONDebtCon ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.62302420740797 * IMP_JOBMgr + 0.482421180363 * IMP_JOBOffice + 0.17027727699736 * IMP_JOBOther + 0.39664058551545 * IMP_JOBProfExe + -0.75461795393778 * IMP_JOBSales + -0.67612610938861 * IMP_REASONDebtCon ;
MPRINT(EM_DIAGRAM):   H11 = -2.43628954762314 + H11 ;
MPRINT(EM_DIAGRAM):   H12 = 3.19760305723593 + H12 ;
MPRINT(EM_DIAGRAM):   H13 = -0.01403734775582 + H13 ;
MPRINT(EM_DIAGRAM):   H14 = -2.31915399939109 + H14 ;
MPRINT(EM_DIAGRAM):   H15 = 0.76956367031114 + H15 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   H11 = .;
MPRINT(EM_DIAGRAM):   H12 = .;
MPRINT(EM_DIAGRAM):   H13 = .;
MPRINT(EM_DIAGRAM):   H14 = .;
MPRINT(EM_DIAGRAM):   H15 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node BAD ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   drop BAD1 BAD0 ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   BAD1 = .;
MPRINT(EM_DIAGRAM):   BAD0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
MPRINT(EM_DIAGRAM):   BAD1 = 0;
MPRINT(EM_DIAGRAM):   BAD0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
MPRINT(EM_DIAGRAM):   BAD1 = 1;
MPRINT(EM_DIAGRAM):   BAD0 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   BAD1 = .;
MPRINT(EM_DIAGRAM):   BAD0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_BAD1 = 1.68183325394287 * H11 + -4.47637763853637 * H12 + 4.95877587880174 * H13 + -2.45252133618952 * H14 + 2.72907958971005 * H15 ;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.60571744508804 + P_BAD1 ;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0;
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_BAD1 , P_BAD0 );
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_BAD1 = EXP(P_BAD1 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_BAD1 ;
MPRINT(EM_DIAGRAM):   P_BAD0 = EXP(P_BAD0 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_BAD0 ;
MPRINT(EM_DIAGRAM):   P_BAD1 = P_BAD1 / _SUM_;
MPRINT(EM_DIAGRAM):   P_BAD0 = P_BAD0 / _SUM_;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD1 = .;
MPRINT(EM_DIAGRAM):   P_BAD0 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.19939577039274;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.80060422960725;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *****************************;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node BAD ;
MPRINT(EM_DIAGRAM):   *** ******************************;
MPRINT(EM_DIAGRAM):   IF MISSING( BAD1 ) THEN R_BAD1 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_BAD1 = BAD1 - P_BAD1 ;
MPRINT(EM_DIAGRAM):   IF MISSING( BAD0 ) THEN R_BAD0 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_BAD0 = BAD0 - P_BAD0 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the I_BAD AND U_BAD ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_BAD1 ;
MPRINT(EM_DIAGRAM):   I_BAD = "1           " ;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_BAD0 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_BAD0 ;
MPRINT(EM_DIAGRAM):   I_BAD = "0           " ;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
MPRINT(EM_DIAGRAM):   drop S_:;
MPRINT(EM_DIAGRAM):   run;
21939      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
21940      quit;
21941      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
21942      filename emflow "J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21943      *------------------------------------------------------------*;
21944      * Neural: Scoring VALIDATE data;
21945      *------------------------------------------------------------*;
21946      data EMWS1.Neural_VALIDATE
21947      / view=EMWS1.Neural_VALIDATE
21948      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_VALIDATE / view=EMWS1.Neural_VALIDATE ;
21949      set EMWS1.Impt_VALIDATE
21950      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_VALIDATE ;
21951      %inc emflow;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_BAD $ 12 ;
MPRINT(EM_DIAGRAM):   label S_IMP_CLAGE = 'Standard: IMP_CLAGE' ;
MPRINT(EM_DIAGRAM):   label S_IMP_CLNO = 'Standard: IMP_CLNO' ;
MPRINT(EM_DIAGRAM):   label S_IMP_DEBTINC = 'Standard: IMP_DEBTINC' ;
MPRINT(EM_DIAGRAM):   label S_IMP_DELINQ = 'Standard: IMP_DELINQ' ;
MPRINT(EM_DIAGRAM):   label S_IMP_DEROG = 'Standard: IMP_DEROG' ;
MPRINT(EM_DIAGRAM):   label S_IMP_MORTDUE = 'Standard: IMP_MORTDUE' ;
MPRINT(EM_DIAGRAM):   label S_IMP_NINQ = 'Standard: IMP_NINQ' ;
MPRINT(EM_DIAGRAM):   label S_IMP_VALUE = 'Standard: IMP_VALUE' ;
MPRINT(EM_DIAGRAM):   label S_IMP_YOJ = 'Standard: IMP_YOJ' ;
MPRINT(EM_DIAGRAM):   label S_LOAN = 'Standard: LOAN' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBMgr = 'Dummy: IMP_JOB=Mgr' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBOffice = 'Dummy: IMP_JOB=Office' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBOther = 'Dummy: IMP_JOB=Other' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBProfExe = 'Dummy: IMP_JOB=ProfExe' ;
MPRINT(EM_DIAGRAM):   label IMP_JOBSales = 'Dummy: IMP_JOB=Sales' ;
MPRINT(EM_DIAGRAM):   label IMP_REASONDebtCon = 'Dummy: IMP_REASON=DebtCon' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_JOB ;
MPRINT(EM_DIAGRAM):   drop IMP_JOBMgr IMP_JOBOffice IMP_JOBOther IMP_JOBProfExe IMP_JOBSales ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   IMP_JOBMgr = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBOffice = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBOther = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBProfExe = 0;
MPRINT(EM_DIAGRAM):   IMP_JOBSales = 0;
MPRINT(EM_DIAGRAM):   if missing( IMP_JOB ) then do;
MPRINT(EM_DIAGRAM):   IMP_JOBMgr = .;
MPRINT(EM_DIAGRAM):   IMP_JOBOffice = .;
MPRINT(EM_DIAGRAM):   IMP_JOBOther = .;
MPRINT(EM_DIAGRAM):   IMP_JOBProfExe = .;
MPRINT(EM_DIAGRAM):   IMP_JOBSales = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_JOB,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OTHER' then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OFFICE' then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'MGR' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBMgr = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OFFICE' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBOffice = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OTHER' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBOther = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'SALES' then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'PROFEXE' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBProfExe = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SALES' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBSales = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SELF' then do;
MPRINT(EM_DIAGRAM):   IMP_JOBMgr = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBOffice = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBOther = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBProfExe = -1;
MPRINT(EM_DIAGRAM):   IMP_JOBSales = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   IMP_JOBMgr = .;
MPRINT(EM_DIAGRAM):   IMP_JOBOffice = .;
MPRINT(EM_DIAGRAM):   IMP_JOBOther = .;
MPRINT(EM_DIAGRAM):   IMP_JOBProfExe = .;
MPRINT(EM_DIAGRAM):   IMP_JOBSales = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_REASON ;
MPRINT(EM_DIAGRAM):   drop IMP_REASONDebtCon ;
MPRINT(EM_DIAGRAM):   if missing( IMP_REASON ) then do;
MPRINT(EM_DIAGRAM):   IMP_REASONDebtCon = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_REASON,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm7 = 'DEBTCON' then do;
MPRINT(EM_DIAGRAM):   IMP_REASONDebtCon = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'HOMEIMP' then do;
MPRINT(EM_DIAGRAM):   IMP_REASONDebtCon = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   IMP_REASONDebtCon = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
MPRINT(EM_DIAGRAM):   IF NMISS( IMP_CLAGE , IMP_CLNO , IMP_DEBTINC , IMP_DELINQ , IMP_DEROG , IMP_MORTDUE , IMP_NINQ , IMP_VALUE , IMP_YOJ , LOAN ) THEN DO;
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_IMP_CLAGE = -2.1324986323703 + 0.01177180625915 * IMP_CLAGE ;
MPRINT(EM_DIAGRAM):   S_IMP_CLNO = -2.11100475843317 + 0.09921497033636 * IMP_CLNO ;
MPRINT(EM_DIAGRAM):   S_IMP_DEBTINC = -4.21130359350115 + 0.12464292126092 * IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   S_IMP_DELINQ = -0.40381023676556 + 0.87362166360406 * IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   S_IMP_DEROG = -0.31573464531037 + 1.31032371760165 * IMP_DEROG ;
MPRINT(EM_DIAGRAM):   S_IMP_MORTDUE = -1.76062130304699 + 0.000023929645 * IMP_MORTDUE ;
MPRINT(EM_DIAGRAM):   S_IMP_NINQ = -0.7098195299189 + 0.61350782376294 * IMP_NINQ ;
MPRINT(EM_DIAGRAM):   S_IMP_VALUE = -1.78391262611731 + 0.00001740731711 * IMP_VALUE ;
MPRINT(EM_DIAGRAM):   S_IMP_YOJ = -1.21374892345752 + 0.13686286372334 * IMP_YOJ ;
MPRINT(EM_DIAGRAM):   S_LOAN = -1.61848713271866 + 0.00008662382017 * LOAN ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_CLAGE ) THEN S_IMP_CLAGE = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_CLAGE = -2.1324986323703 + 0.01177180625915 * IMP_CLAGE ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_CLNO ) THEN S_IMP_CLNO = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_CLNO = -2.11100475843317 + 0.09921497033636 * IMP_CLNO ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_DEBTINC ) THEN S_IMP_DEBTINC = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_DEBTINC = -4.21130359350115 + 0.12464292126092 * IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_DELINQ ) THEN S_IMP_DELINQ = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_DELINQ = -0.40381023676556 + 0.87362166360406 * IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_DEROG ) THEN S_IMP_DEROG = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_DEROG = -0.31573464531037 + 1.31032371760165 * IMP_DEROG ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_MORTDUE ) THEN S_IMP_MORTDUE = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_MORTDUE = -1.76062130304699 + 0.000023929645 * IMP_MORTDUE ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_NINQ ) THEN S_IMP_NINQ = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_NINQ = -0.7098195299189 + 0.61350782376294 * IMP_NINQ ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_VALUE ) THEN S_IMP_VALUE = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_VALUE = -1.78391262611731 + 0.00001740731711 * IMP_VALUE ;
MPRINT(EM_DIAGRAM):   IF MISSING( IMP_YOJ ) THEN S_IMP_YOJ = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IMP_YOJ = -1.21374892345752 + 0.13686286372334 * IMP_YOJ ;
MPRINT(EM_DIAGRAM):   IF MISSING( LOAN ) THEN S_LOAN = . ;
MPRINT(EM_DIAGRAM):   ELSE S_LOAN = -1.61848713271866 + 0.00008662382017 * LOAN ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   H11 = -0.3017685934797 * S_IMP_CLAGE + 0.67772949919122 * S_IMP_CLNO + 1.76051663874502 * S_IMP_DEBTINC + -0.65992402913565 * S_IMP_DELINQ + -0.15181813253071 * S_IMP_DEROG + -1.79029417231507 * S_IMP_MORTDUE + 0.24427099035887 * 
S_IMP_NINQ + -0.30784019328387 * S_IMP_VALUE + 0.30919279018697 * S_IMP_YOJ + -1.36621980628412 * S_LOAN ;
MPRINT(EM_DIAGRAM):   H12 = 0.53032845652514 * S_IMP_CLAGE + -0.6366888643195 * S_IMP_CLNO + -2.11121456050444 * S_IMP_DEBTINC + -0.33363860643462 * S_IMP_DELINQ + -0.49654770617387 * S_IMP_DEROG + 0.54802157324604 * S_IMP_MORTDUE + 0.19264598572389 * 
S_IMP_NINQ + -0.70679349346154 * S_IMP_VALUE + 0.04196782023788 * S_IMP_YOJ + -0.13099188649286 * S_LOAN ;
MPRINT(EM_DIAGRAM):   H13 = 0.00282582710473 * S_IMP_CLAGE + -0.21028500798803 * S_IMP_CLNO + -0.27051241464249 * S_IMP_DEBTINC + 0.24366734922767 * S_IMP_DELINQ + 0.21891207401132 * S_IMP_DEROG + 0.03701087979685 * S_IMP_MORTDUE + 0.21915275016511 * 
S_IMP_NINQ + -0.04369416010243 * S_IMP_VALUE + -0.17301384533761 * S_IMP_YOJ + 0.01947031689577 * S_LOAN ;
MPRINT(EM_DIAGRAM):   H14 = 0.04010002145966 * S_IMP_CLAGE + 0.08574567871774 * S_IMP_CLNO + -6.36519240230978 * S_IMP_DEBTINC + -0.425151531904 * S_IMP_DELINQ + 0.11691737767998 * S_IMP_DEROG + -0.16947255553468 * S_IMP_MORTDUE + -0.02109707338782 * 
S_IMP_NINQ + -0.12397227771815 * S_IMP_VALUE + 0.43675659396117 * S_IMP_YOJ + 0.18758746301175 * S_LOAN ;
MPRINT(EM_DIAGRAM):   H15 = -0.17934176462643 * S_IMP_CLAGE + -0.01062194946191 * S_IMP_CLNO + -1.75865848996631 * S_IMP_DEBTINC + 0.09613525018482 * S_IMP_DELINQ + -0.15479861612447 * S_IMP_DEROG + 0.10444549762751 * S_IMP_MORTDUE + -0.34687139614226 * 
S_IMP_NINQ + 0.24992785705303 * S_IMP_VALUE + 0.41396843324218 * S_IMP_YOJ + 0.09779538177636 * S_LOAN ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -1.67330879776938 * IMP_JOBMgr + 0.16757057064923 * IMP_JOBOffice + 0.13267750511725 * IMP_JOBOther + 0.74047662930496 * IMP_JOBProfExe + -1.31104464424448 * IMP_JOBSales + 0.79923737744783 * IMP_REASONDebtCon ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.13613566163595 * IMP_JOBMgr + 1.59365591845688 * IMP_JOBOffice + 0.67801461800597 * IMP_JOBOther + 0.19181681974747 * IMP_JOBProfExe + -2.25621146050576 * IMP_JOBSales + -0.29828277287433 * IMP_REASONDebtCon ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.16332920963777 * IMP_JOBMgr + -0.14886049408019 * IMP_JOBOffice + 0.06719478570477 * IMP_JOBOther + -0.11353875863583 * IMP_JOBProfExe + -0.19181249110526 * IMP_JOBSales + 0.11663097049024 * IMP_REASONDebtCon ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 1.05690784634804 * IMP_JOBMgr + -0.27851507675832 * IMP_JOBOffice + 0.3102236813451 * IMP_JOBOther + -0.25632191644424 * IMP_JOBProfExe + -0.86625235533524 * IMP_JOBSales + 0.08527855605787 * IMP_REASONDebtCon ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.62302420740797 * IMP_JOBMgr + 0.482421180363 * IMP_JOBOffice + 0.17027727699736 * IMP_JOBOther + 0.39664058551545 * IMP_JOBProfExe + -0.75461795393778 * IMP_JOBSales + -0.67612610938861 * IMP_REASONDebtCon ;
MPRINT(EM_DIAGRAM):   H11 = -2.43628954762314 + H11 ;
MPRINT(EM_DIAGRAM):   H12 = 3.19760305723593 + H12 ;
MPRINT(EM_DIAGRAM):   H13 = -0.01403734775582 + H13 ;
MPRINT(EM_DIAGRAM):   H14 = -2.31915399939109 + H14 ;
MPRINT(EM_DIAGRAM):   H15 = 0.76956367031114 + H15 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   H11 = .;
MPRINT(EM_DIAGRAM):   H12 = .;
MPRINT(EM_DIAGRAM):   H13 = .;
MPRINT(EM_DIAGRAM):   H14 = .;
MPRINT(EM_DIAGRAM):   H15 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node BAD ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   drop BAD1 BAD0 ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   BAD1 = .;
MPRINT(EM_DIAGRAM):   BAD0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
MPRINT(EM_DIAGRAM):   BAD1 = 0;
MPRINT(EM_DIAGRAM):   BAD0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
MPRINT(EM_DIAGRAM):   BAD1 = 1;
MPRINT(EM_DIAGRAM):   BAD0 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   BAD1 = .;
MPRINT(EM_DIAGRAM):   BAD0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_BAD1 = 1.68183325394287 * H11 + -4.47637763853637 * H12 + 4.95877587880174 * H13 + -2.45252133618952 * H14 + 2.72907958971005 * H15 ;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.60571744508804 + P_BAD1 ;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0;
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_BAD1 , P_BAD0 );
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_BAD1 = EXP(P_BAD1 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_BAD1 ;
MPRINT(EM_DIAGRAM):   P_BAD0 = EXP(P_BAD0 - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_BAD0 ;
MPRINT(EM_DIAGRAM):   P_BAD1 = P_BAD1 / _SUM_;
MPRINT(EM_DIAGRAM):   P_BAD0 = P_BAD0 / _SUM_;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD1 = .;
MPRINT(EM_DIAGRAM):   P_BAD0 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.19939577039274;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.80060422960725;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *****************************;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node BAD ;
MPRINT(EM_DIAGRAM):   *** ******************************;
MPRINT(EM_DIAGRAM):   IF MISSING( BAD1 ) THEN R_BAD1 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_BAD1 = BAD1 - P_BAD1 ;
MPRINT(EM_DIAGRAM):   IF MISSING( BAD0 ) THEN R_BAD0 = . ;
MPRINT(EM_DIAGRAM):   ELSE R_BAD0 = BAD0 - P_BAD0 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the I_BAD AND U_BAD ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_BAD1 ;
MPRINT(EM_DIAGRAM):   I_BAD = "1           " ;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_BAD0 ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_BAD0 ;
MPRINT(EM_DIAGRAM):   I_BAD = "0           " ;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
MPRINT(EM_DIAGRAM):   drop S_:;
22347      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
22348      quit;
22349      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22350      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22351      * Neural: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural: Computing metadata for TRAIN data;
22352      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Neural\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural_TRAIN out=WORK.M2FVMK9Y noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2FVMK9Y;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FVMK9Y(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2FVMK9Y;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2FVMK9Y;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0RZIADV NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0RZIADV;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0RZIADV;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0CR7ROY(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0RZIADV;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0RZIADV;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0RZIADV;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0RZIADV;
MPRINT(EMADVISECOLUMNS):   set WORK.M0RZIADV;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Impt_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("BAD") model = "Neural";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
22697      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMINFO;
22698      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
22699      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
22700      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   run;
22704      run;
22705      proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
22706      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22707      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.12 seconds
      cpu time            0.04 seconds
      

22708      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
22709      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22710      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

22711      proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
22712      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22713      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

22714      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMINFO;
22715      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
22716      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22717      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
      

22718      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
22719      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
22720      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
22721      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
