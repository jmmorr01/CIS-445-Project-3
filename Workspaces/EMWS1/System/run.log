NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

Traverser: Traverser invoked.  MPCONNECT command is !sascmdv -nosyntaxcheck -noasynchio -noobjectserver. 
Traverser: Beginning flow traversal 
16070      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16071      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16072      put '<Node Id="Ids" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Ids" Event="Run" Pid="8200" Gridid=""/>';
16073      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16074      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Ids : Beginning update before running 
* datetime : 07NOV2018:21:47:56 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Ids\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16076      %let _HPDMGRIDHOST=;
16077      %let _HPDMGRIDINSTALLLOC=;
16078      %let _HPDMGRIDDATASERVER=;
16079      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Ids : End update 
* datetime : 07NOV2018:21:47:57 
* 
*------------------------------------------------------------* 
16080      %em_getactionstatus(emlib =EMWS1, nodeid=Ids);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16081      %let em_Train = N;
16082      %let em_Score = N;
16083      %let em_Report = N;
16084      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.08 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Ids" has already run. 
Node "Ids" succeeded. 
16085      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16086      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16087      put '<Node Id="Ids" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Ids" Event="Complete" Pid="8200" Gridid=""/>';
16088      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "CNTRL3" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
16089      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16090      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16091      put '<Node Id="Stat" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Stat" Event="Run" Pid="8200" Gridid=""/>';
16092      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16093      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Stat : Beginning update before running 
* datetime : 07NOV2018:21:47:58 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Stat_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Stat\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16114      %let _HPDMGRIDHOST=;
16115      %let _HPDMGRIDINSTALLLOC=;
16116      %let _HPDMGRIDDATASERVER=;
16117      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Stat : End update 
* datetime : 07NOV2018:21:47:58 
* 
*------------------------------------------------------------* 
16118      %em_getactionstatus(emlib =EMWS1, nodeid=Stat);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16119      %let em_filemodtime=;
16120      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
16121      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
16122      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
16123      where fileref eq "#LN00143";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00143";
16124      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
16125      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00143';
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

16126      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
16127      %let em_Train = N;
16128      %let em_Score = N;
16129      %let em_Report = N;
16130      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.13 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Stat" has already run. 
Node "Stat" succeeded. 
16131      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16132      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16133      put '<Node Id="Stat" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Stat" Event="Complete" Pid="8200" Gridid=""/>';
16134      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "CNTRL3" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "IMPT" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
16135      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16136      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16137      put '<Node Id="Part" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Part" Event="Run" Pid="8200" Gridid=""/>';
16138      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16139      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Part : Beginning update before running 
* datetime : 07NOV2018:21:47:59 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Part_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "DOCUMENT" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Part\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16158      %let _HPDMGRIDHOST=;
16159      %let _HPDMGRIDINSTALLLOC=;
16160      %let _HPDMGRIDDATASERVER=;
16161      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Part : End update 
* datetime : 07NOV2018:21:47:59 
* 
*------------------------------------------------------------* 
16162      %em_getactionstatus(emlib =EMWS1, nodeid=Part);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16163      %let em_Train = N;
16164      %let em_Score = N;
16165      %let em_Report = N;
16166      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Part" has already run. 
Node "Part" succeeded. 
16167      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16168      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16169      put '<Node Id="Part" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Part" Event="Complete" Pid="8200" Gridid=""/>';
16170      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "CNTRL3" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
16171      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16172      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16173      put '<Node Id="Impt" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Impt" Event="Run" Pid="8200" Gridid=""/>';
16174      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16175      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Impt : Beginning update before running 
* datetime : 07NOV2018:21:48:00 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Impt_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Impt\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16195      %let _HPDMGRIDHOST=;
16196      %let _HPDMGRIDINSTALLLOC=;
16197      %let _HPDMGRIDDATASERVER=;
16198      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Impt : End update 
* datetime : 07NOV2018:21:48:01 
* 
*------------------------------------------------------------* 
16199      %em_getactionstatus(emlib =EMWS1, nodeid=Impt);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16200      %let em_Train = N;
16201      %let em_Score = N;
16202      %let em_Report = N;
16203      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Impt" has already run. 
Node "Impt" succeeded. 
16204      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16205      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16206      put '<Node Id="Impt" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Impt" Event="Complete" Pid="8200" Gridid=""/>';
16207      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "CNTRL3" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
Node "CNTRL" succeeded. 
16208      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16209      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16210      put '<Node Id="CNTRL" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="CNTRL" Event="Complete" Pid="8200" Gridid=""/>';
16211      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "CNTRL3" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
16212      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16213      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16214      put '<Node Id="Neural3" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural3" Event="Run" Pid="8200" Gridid=""/>';
16215      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16216      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural3 : Beginning update before running 
* datetime : 07NOV2018:21:48:02 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural3_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Neural3\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16236      %let _HPDMGRIDHOST=;
16237      %let _HPDMGRIDINSTALLLOC=;
16238      %let _HPDMGRIDDATASERVER=;
16239      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural3 : End update 
* datetime : 07NOV2018:21:48:03 
* 
*------------------------------------------------------------* 
16240      %em_getactionstatus(emlib =EMWS1, nodeid=Neural3);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16241      %let em_Train = N;
16242      %let em_Score = N;
16243      %let em_Report = N;
16244      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural3" has already run. 
Node "Neural3" succeeded. 
16245      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16246      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16247      put '<Node Id="Neural3" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural3" Event="Complete" Pid="8200" Gridid=""/>';
16248      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "CNTRL3" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
16249      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16250      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16251      put '<Node Id="Neural2" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural2" Event="Run" Pid="8200" Gridid=""/>';
16252      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16253      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural2 : Beginning update before running 
* datetime : 07NOV2018:21:48:03 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural2_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Neural2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16273      %let _HPDMGRIDHOST=;
16274      %let _HPDMGRIDINSTALLLOC=;
16275      %let _HPDMGRIDDATASERVER=;
16276      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural2 : End update 
* datetime : 07NOV2018:21:48:04 
* 
*------------------------------------------------------------* 
16277      %em_getactionstatus(emlib =EMWS1, nodeid=Neural2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16278      %let em_Train = N;
16279      %let em_Score = N;
16280      %let em_Report = N;
16281      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural2" has already run. 
Node "Neural2" succeeded. 
16282      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16283      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16284      put '<Node Id="Neural2" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural2" Event="Complete" Pid="8200" Gridid=""/>';
16285      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "CNTRL3" 
Traverser: WaitingNode "CNTRL2" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
traverser_readyNode_note 
16286      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16287      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16288      put '<Node Id="Neural" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural" Event="Run" Pid="8200" Gridid=""/>';
16289      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16290      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural : Beginning update before running 
* datetime : 07NOV2018:21:48:05 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Neural\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16310      %let _HPDMGRIDHOST=;
16311      %let _HPDMGRIDINSTALLLOC=;
16312      %let _HPDMGRIDDATASERVER=;
16313      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural : End update 
* datetime : 07NOV2018:21:48:05 
* 
*------------------------------------------------------------* 
16314      %em_getactionstatus(emlib =EMWS1, nodeid=Neural);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16315      %let em_Train = N;
16316      %let em_Score = N;
16317      %let em_Report = N;
16318      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural" has already run. 
Node "Neural" succeeded. 
16319      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16320      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16321      put '<Node Id="Neural" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural" Event="Complete" Pid="8200" Gridid=""/>';
16322      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "CNTRL3" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
traverser_readyNode_note 
16323      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16324      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16325      put '<Node Id="Trans" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Trans" Event="Run" Pid="8200" Gridid=""/>';
16326      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

16327      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Trans : Beginning update before running 
* datetime : 07NOV2018:21:48:06 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Trans_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Trans\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16347      %let _HPDMGRIDHOST=;
16348      %let _HPDMGRIDINSTALLLOC=;
16349      %let _HPDMGRIDDATASERVER=;
16350      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Trans : End update 
* datetime : 07NOV2018:21:48:07 
* 
*------------------------------------------------------------* 
16351      %em_getactionstatus(emlib =EMWS1, nodeid=Trans);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16352      %let em_filemodtime=;
16353      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
16354      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
16355      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
16356      where fileref eq "#LN00282";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00282";
16357      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
16358      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00282';
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

16359      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
16360      %let em_filemodtime=;
16361      data _null_;
MPRINT(EM_GETACTIONSTATUS):     data _null_;
16362      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
16363      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
16364      where fileref eq "#LN00283";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00283";
16365      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
16366      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00283';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

16367      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
16368      %let em_Train = N;
16369      %let em_Score = N;
16370      %let em_Report = N;
16371      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.19 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Trans" has already run. 
Node "Trans" succeeded. 
16372      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16373      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16374      put '<Node Id="Trans" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Trans" Event="Complete" Pid="8200" Gridid=""/>';
16375      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "CNTRL3" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
traverser_readyNode_note 
Node "CNTRL2" succeeded. 
16376      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16377      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16378      put '<Node Id="CNTRL2" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="CNTRL2" Event="Complete" Pid="8200" Gridid=""/>';
16379      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "VARSEL" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "CNTRL3" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
16380      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16381      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16382      put '<Node Id="BINNING" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="BINNING" Event="Run" Pid="8200" Gridid=""/>';
16383      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16384      %let emloopmode =;
*------------------------------------------------------------* 
* 
* BINNING : Beginning update before running 
* datetime : 07NOV2018:21:48:08 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.BINNING_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'CIS 445 Project 3';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Project 3';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
16641      %let emexceptionString =;
16642      %let EMEXCEPTIONSTRING=;
16643      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
16644      * UPDATE: BINNING;
MPRINT(EM_DIAGRAM):   * UPDATE: BINNING;
16645      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16646      %let EM_ACTION = UPDATE;
16647      %let syscc = 0;
16648      %macro main;
16649      
16650        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
16651        %include temp;
16652        filename temp;
16653      
16654        %setProperties;
16655      
16656        %if %upcase(&EM_ACTION) = CREATE %then %do;
16657          filename temp catalog 'sashelp.emmdfy.binning_create.source';
16658          %include temp;
16659          filename temp;
16660      
16661          %create;
16662        %end;
16663      
16664         %else
16665         %if %upcase(&EM_ACTION) = TRAIN %then %do;
16666      
16667             filename temp catalog 'sashelp.emmdfy.binning_train.source';
16668             %include temp;
16669             filename temp;
16670             %train;
16671         %end;
16672      
16673        %else
16674        %if %upcase(&EM_ACTION) = SCORE %then %do;
16675          filename temp catalog 'sashelp.emmdfy.binning_score.source';
16676          %include temp;
16677          filename temp;
16678      
16679          %score;
16680      
16681        %end;
16682      
16683        %else
16684        %if %upcase(&EM_ACTION) = REPORT %then %do;
16685      
16686             filename temp catalog 'sashelp.emmdfy.binning_report.source';
16687             %include temp;
16688             filename temp;
16689      
16690             %report;
16691         %end;
16692      
16693         %doendm:
16694      %mend main;
16695      
16696      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
16698     +%macro SetProperties;
16700     +     /* IGN options */
16701     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
16702     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
16703     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
16705     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
16706     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
16707     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
16708     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
16709     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
16710     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
16711     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
16712     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
16713     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
16714     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
16715     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
16716     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
16717     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
16718     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
16720     +     %em_checkmacro(name=EM_PROPERTY_INTTARGETMETHOD, value=CUTMEAN, global=Y);
16721     +     %em_checkmacro(name=EM_PROPERTY_USERCUTVALUE, value=0.2, global=Y);
16722     +     %em_checkmacro(name=EM_PROPERTY_RejectIntTarget, value=N, global=Y);
16725     +%mend SetProperties;
16726     +%macro appendfiles(fileref1, fileref2);
16727     +     data _null_;
16728     +       length c $256;
16729     +       fid1=fopen("&fileref1",'A');
16730     +       fid2=fopen("&fileref2",'I');
16731     +       cval = finfo(fid2,'lrecl');
16732     +       put cval= fid1= fid2=;
16733     +       if (fid2 > 0) then
16734     +         do while(fread(fid2)=0);
16735     +           rc = fget(fid2,c,256);
16736     +           _msg_=sysmsg();
16737     +           /* put rc= c= _msg_=; */
16738     +           rc = fput(fid1,strip(c));
16739     +           rc = fwrite(fid1);
16740     +         end;
16741     +         _msg_=sysmsg();
16742     +         put _msg_=;
16743     +       rc = fclose(fid1);
16744     +       rc = fclose(fid2);
16745     +     run;
16746     +%mend appendfiles;
16748     +%macro buildOptScoreCode;
16750     +    %em_register(key=BINCODE, type=FOLDER);
16752     +    filename x catalog 'sashelp.emutil.em_deldir.source';
16753     +    %inc x;
16754     +    filename x;
16755     +    %delDir(folder=%nrbquote(&em_user_bincode));
16757     +    data _null_; length rc $200;
16758     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
16759     +    run;
16761     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
16763     +    %let dsid = %sysfunc(open(class_nosv));
16764     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
16765     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
16767     +    %let oldname=;
16768     +    %do %while(^%sysfunc(fetch(&dsid)));
16769     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
16770     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
16772     +        %if &name ne &oldname %then %do;
16773     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
16774     +             data _null_;
16775     +                length string $200 flag endflag 8;
16776     +                retain string flag endflag;
16777     +                set class_nosv end=eof;
16778     +                where DISPLAY_VAR ="&name";
16779     +                by _variable_ _group_;
16780     +                file _F1;
16781     +                index = kindex(_variable_, "BIN_");
16782     +                if index gt 0 then do;
16783     +                   if first._variable_ then do;
16784     +                      put ' ';
16785     +                      put "&EM_CODEBAR;";
16786     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
16787     +                      put string;
16788     +                      put "&EM_CODEBAR;";
16790     +                      if origLabel ne "" then do;
16791     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
16792     +                            put string;
16793     +                            string = tranwrd(origLabel,"'","''");
16794     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
16795     +                            put string;
16796     +                      end;
16797     +                      else do;
16798     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
16799     +                             put string;
16800     +                      end;
16802     +                      put ' ';
16804     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
16805     +                      put string;
16806     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
16807     +                      put string;
16808     +                      put "end;";
16809     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
16810     +                      put string;
16811     +                   end;
16812     +                   if first._group_ then do;
16813     +                      flag = 0;
16814     +                      endflag = 1;
16815     +                      if ^first._variable_ then do;
16816     +                         put "else";
16817     +                      end;
16818     +                      if LB ne . then do;
16819     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
16820     +                      end;
16821     +                      else do;
16822     +                         flag = 1;
16823     +                         string = "if";
16824     +                      end;
16825     +                   end;
16826     +                   if last._Group_ then do;
16827     +                      if UB ne . then do;
16828     +                        if flag ne 1 then do;
16829     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
16830     +                        end;
16831     +                        else do;
16832     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
16833     +                        end;
16834     +                      end;
16835     +                      else do;
16836     +                         if flag=1 then do;
16837     +                            string = strip(DISPLAY_VAR) ;
16838     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
16839     +                            endflag=0;
16840     +                            string="";
16841     +                         end;
16842     +                         else do;
16843     +                            string = strip(string)!!" then do;";
16844     +                         end;
16845     +                      end;
16846     +                      put string;
16847     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
16848     +                      put string;
16849     +                      if endflag eq 1 then do;
16850     +                        put "end;";
16851     +                      end;
16852     +                   end;
16853     +                   if last._variable_ then do;
16854     +                     string = "end;";
16855     +                     put string;
16856     +                   end;
16858     +                end;
16859     +                else do;
16860     +                   _split_value_ = tranwrd(_split_value_,"'","''");
16861     +                   if first._group_ then do;
16862     +                      flag=0;
16863     +                      if ^first._variable_ then
16864     +                         put 'else';
16865     +                      else do;
16866     +                         put ' ';
16867     +                         put "&EM_CODEBAR;";
16868     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
16869     +                         put string;
16870     +                         put "&EM_CODEBAR;";
16872     +                         if origLabel ne "" then do;
16873     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
16874     +                               put string;
16875     +                               string = tranwrd(origLabel,"'","''");
16876     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
16877     +                               put string;
16878     +                         end;
16879     +                         else do;
16880     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
16881     +                               put string;
16882     +                         end;
16884     +                         put ' ';
16886     +                         if format ne '' then do;
16887     +                            if first._variable_ then do;
16888     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
16889     +                               put string;
16890     +                               string = '%dmnormip(_UFormat);';
16891     +                               put string;
16893     +                               string ="if MISSING(_UFORMAT) then do;";
16894     +                               put string;
16895     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
16896     +                               put string;
16897     +                               put "end;";
16899     +                               string="else if NOT MISSING(_UFORMAT) then do;";
16900     +                               put string;
16902     +                            end;
16903     +                         end;
16904     +                         else do;
16905     +                            if type = 'N' then do;
16906     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
16907     +                              put string;
16908     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
16909     +                              put string;
16910     +                              put "end;";
16912     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
16913     +                              put string;
16914     +                            end;
16915     +                            else if type='C' then do;
16916     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
16917     +                              put string;
16918     +                              string = '%dmnormip(_UFormat);';
16919     +                              put string;
16921     +                              string ="if MISSING(_UFORMAT) then do;";
16922     +                              put string;
16923     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
16924     +                              put string;
16925     +                              put "end;";
16927     +                              string="else if NOT MISSING(_UFORMAT) then do;";
16928     +                              put string;
16929     +                              string = '%dmnormip(_UFormat);';
16930     +                              put string;
16931     +                           end;
16932     +                         end;
16933     +                      end;
16934     +                      if format ne '' OR type='C' then do;
16935     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
16936     +                      end;
16937     +                      else do;
16938     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
16939     +                      end;
16940     +                   end;
16941     +                   else do;
16942     +                      if flag ne 1 then do;
16943     +                       if format ne '' OR type='C' then do;
16944     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
16945     +                       end;
16946     +                       else do;
16947     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
16948     +                       end;
16949     +                         length = length(tempstring);
16951     +                         if length < 195 then do;
16952     +                            string = tempstring;
16953     +                         end;
16954     +                         else do;
16956     +                            string = strip(string);
16957     +                            put string;
16958     +                            string = ") then do;";
16959     +                            put string;
16961     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
16962     +                            put string;
16963     +                            put "end;";
16965     +                            put 'else';
16966     +                            if format ne '' OR type='C' then do;
16967     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
16968     +                            end;
16969     +                            else do;
16970     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
16971     +                            end;
16972     +                         end;
16973     +                      end;
16974     +                   end;
16976     +                   if last._group_ then do;
16977     +                      string = strip(string);
16978     +                      put string;
16980     +                      string = ") then do;";
16981     +                      put string;
16983     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
16984     +                      put string;
16985     +                      put "end;";
16986     +                   end;
16988     +                   if last._variable_ then do;
16989     +                     put "else do;";
16991     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
16992     +                     put string;
16994     +                     put "end;";
16995     +                     put "end;";
16996     +                   end;
16997     +                end;
16998     +             run;
17000     +             %let oldname = &name;
17001     +        %end;
17002     +    %end;
17003     +    %let dsid = %sysfunc(close(&dsid));
17005     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
17006     +    data _null_;
17007     +       file _F1;
17008     +       put "length _UFormat $200;";
17009     +       put "drop _UFormat;";
17010     +       put "_UFormat='';";
17011     +    run;
17012     +    filename _F1;
17014     +   %em_register(key=EMSCOREVAR, type=DATA);
17015     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
17016     +   proc datasets lib=&em_lib nolist;
17017     +      delete &scorevarDs;
17018     +   run;
17019     +   quit;
17021     +   %let filrf=mydir;
17022     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
17023     +   %let did=%sysfunc(dopen(&filrf));
17025     +   %if &did %then %do;  %PUT  did= &did;
17026     +       %let memcount=%sysfunc(dnum(&did));
17027     +       %if &memcount > 0 %then %do;
17028     +           data &em_user_emscorevar;
17029     +              length Name $32 formula $70 file $200;
17030     +              keep NAME Formula file;
17031     +              formula  = '';
17032     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
17033     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
17034     +               output;
17035     +           %end;
17036     +           %do i=1 %to &memcount;
17037     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
17038     +               %let newvar = %scan(&name, 1, .);
17039     +               %if "&newvar" ne "_ALL_" %then %do;
17040     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
17041     +                   output;
17042     +               %end;
17043     +           %end;
17045     +           run;
17046     +       %end;
17047     +       %let did = %sysfunc(dclose(&did));
17048     +  %end;
17050     +   %doendu:
17051     +%mend buildOptScoreCode;
17054     +%macro buildScoreCode(flowCode, publishCode);
17057     +  filename x "&flowCode";
17059     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
17060     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
17061     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
17063     +  data temp;
17064     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
17065     +    by display_var _Split_value_;
17066     +     if upcase(_Split_value_) ne 'MISSING';
17067     +   run;
17069     +   data temp_missing;
17070     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
17071     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
17072     +     by display_var _Split_value_;
17073     +     if upcase(_Split_value_) eq 'MISSING';
17074     +     keep _variable_ display_var missgrp;
17075     +   run;
17077     +   proc sort data=temp_missing; by display_var missgrp; run;
17079     +   data temp_missing;
17080     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
17081     +     by display_var missgrp;
17082     +     if ^_a then delete;
17083     +     keep _variable_ display_var missgrp ;
17084     +   run;
17086     +   data temp;
17087     +     merge temp temp_missing;
17088     +     by display_var;
17089     +     if display_Var eq '' then delete;
17090     +    run;
17092     +    /* pull in wtev values */
17093     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
17094     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
17095     +    proc sort data=temp;  by display_var _group_; run;
17097     +   data temp;
17098     +      merge temp tempcoarse(keep=display_var _group_  role) ;
17099     +      by display_var _group_;
17100     +    run;
17102     +    data temp;
17103     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
17104     +      by display_var;
17106     +      if _group_ = . then delete;
17107     +      if _variable_ = '' then delete;
17108     +    run;
17110     +    proc sort data=temp out=class;
17111     +       by _variable_ _group_ LB;
17112     +    run;
17114     +    data _null_;
17115     +      file X;
17117     +      put "length _UFormat $200;";
17118     +      put "drop _UFormat;";
17119     +      put "_UFormat='';";
17120     +    run;
17122     +    data class_nosv;
17123     +      set class;
17124     +      if upcase(role)="INPUT";
17125     +    run;
17127     +    data _null_;
17128     +       file X MOD;
17129     +       length string $200 flag endflag 8;
17130     +       retain string flag endflag;
17131     +       set class_nosv end=eof;
17132     +       by _variable_ _group_;
17134     +       index = kindex(_variable_, "BIN_");
17135     +       if index gt 0 then do;
17137     +         if first._variable_ then do;
17138     +            put ' ';
17139     +            put "&EM_CODEBAR;";
17140     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
17141     +            put string;
17142     +            put "&EM_CODEBAR;";
17145     +            if origLabel ne "" then do;
17146     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
17147     +              put string;
17148     +              string = tranwrd(origLabel,"'","''");
17149     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
17150     +              put string;
17151     +            end;
17152     +            else do;
17153     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
17154     +             put string;
17155     +            end;
17157     +            put ' ';
17159     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
17160     +            put string;
17161     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17162     +            put string;
17163     +            put "end;";
17164     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
17165     +            put string;
17166     +          end;
17167     +           if first._group_ then do;
17168     +              flag = 0;
17169     +              endflag = 1;
17170     +              if ^first._variable_ then do;
17171     +                put "else";
17172     +              end;
17173     +              if LB ne . then do;
17174     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
17175     +              end;
17176     +              else do;
17177     +                 flag = 1;
17178     +                 string = "if";
17179     +              end;
17181     +           end;
17182     +           if last._Group_ then do;
17183     +              if UB ne . then do;
17184     +                if flag ne 1 then do;
17185     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
17186     +                end;
17187     +                else do;
17188     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
17189     +                end;
17190     +              end;
17191     +              else do;
17192     +                 if flag=1 then do;
17193     +                   string = strip(DISPLAY_VAR) ;
17194     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
17195     +                   endflag = 0;
17196     +                   string="";
17197     +                 end;
17198     +                 else do;
17199     +                   string = strip(string)!!" then do;";
17200     +                 end;
17201     +              end;
17202     +              put string;
17204     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
17205     +              put string;
17206     +              if endflag eq 1 then do;
17207     +                put "end;";
17208     +              end;
17209     +           end;
17210     +           if last._variable_ then do;
17211     +             string = "end;";
17212     +             put string;
17213     +           end;
17214     +       end;
17215     +       else do;
17216     +           _split_value_ = tranwrd(_split_value_,"'","''");
17217     +           if first._group_ then do;
17218     +              flag=0;
17219     +              if ^first._variable_ then
17220     +                 put 'else';
17221     +              else do;
17222     +                 put ' ';
17223     +                 put "&EM_CODEBAR;";
17224     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
17225     +                 put string;
17226     +                 put "&EM_CODEBAR;";
17228     +                 if origLabel ne "" then do;
17229     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
17230     +                   put string;
17231     +                   string = tranwrd(origLabel,"'","''");
17232     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
17233     +                   put string;
17234     +                 end;
17235     +                 else do;
17236     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
17237     +                   put string;
17238     +                 end;
17240     +                 put ' ';
17242     +                if format ne '' then do;
17243     +                  if first._variable_ then do;
17244     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
17245     +                    put string;
17246     +                    string = '%dmnormip(_UFormat);';
17247     +                    put string;
17249     +                     string ="if MISSING(_UFORMAT) then do;";
17250     +                     put string;
17251     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17252     +                     put string;
17253     +                     put "end;";
17255     +                     string="else if NOT MISSING(_UFORMAT) then do;";
17256     +                     put string;
17258     +                  end;
17259     +                end;
17260     +                else do;
17261     +                     if type = 'N' then do;
17262     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
17263     +                       put string;
17264     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17265     +                       put string;
17266     +                       put "end;";
17268     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
17269     +                       put string;
17271     +                     end;
17272     +                     else if type='C' then do;
17273     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
17274     +                        put string;
17275     +                        string = '%dmnormip(_UFormat);';
17276     +                        put string;
17278     +                        string ="if MISSING(_UFORMAT) then do;";
17279     +                        put string;
17280     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17281     +                        put string;
17282     +                        put "end;";
17284     +                        string="else if NOT MISSING(_UFORMAT) then do;";
17285     +                        put string;
17286     +                        string = '%dmnormip(_UFormat);';
17287     +                        put string;
17288     +                    end;
17289     +                end;
17290     +              end;
17291     +              if format ne '' OR type='C' then do;
17292     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
17293     +              end;
17294     +              else do;
17295     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
17296     +              end;
17297     +           end;
17298     +           else do;
17299     +              if flag ne 1 then do;
17300     +                if format ne '' OR type='C' then do;
17301     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
17302     +                end;
17303     +                else do;
17304     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
17305     +                end;
17306     +                length = klength(tempstring);
17308     +                if length < 195 then do;
17309     +                   string = tempstring;
17310     +                end;
17311     +                else do;
17313     +                   string = strip(string);
17314     +                   put string;
17315     +                   string = ") then do;";
17316     +                   put string;
17318     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
17319     +                   put string;
17320     +                   put "end;";
17322     +                 /*  string = strip(string)||",'...';"; */
17324     +                   put 'else';
17325     +                   if format ne '' OR type='C' then do;
17326     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
17327     +                   end;
17328     +                   else do;
17329     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
17330     +                   end;
17333     +                end;
17334     +              end;
17335     +           end;
17337     +           if last._group_ then do;
17338     +              string = strip(string);
17339     +              put string;
17340     +              string = ") then do;";
17341     +              put string;
17343     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
17344     +              put string;
17345     +              put "end;";
17346     +           end;
17348     +           if last._variable_ then do;
17349     +             put "else do;";
17351     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17352     +             put string;
17354     +             put "end;";
17355     +             put "end;";
17356     +           end;
17357     +         *end;
17358     +       end;
17359     +    run;
17361     +    /* generate PublishCode the same as flowscorecode */
17362     +    filename Y "&publishCode";
17364     +    /* if publishCode already exists, wipe it out first */
17365     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
17366     +      %let rc = %sysfunc(fdelete(Y));
17367     +    %end;
17369     +    %appendfiles(Y, X);
17371     +    %if %EM_BINARY_TARGET= %then %do;
17372     +      %if %symexist(EM_NUM_INTERVAL_TARGET)=0 %then %do;
17373     +         %em_varMacro(name=EM_INTERVAL_TARGET, metadata=&EM_DATA_variableSet, where=%nrbquote(ROLE="TARGET" and LEVEL="INTERVAL" and (USE="Y" or USE="D")), nummacro=em_num_interval_Target);
17374     +      %end;
17375     +      %let ibn_inttarget=%EM_INTERVAL_TARGET;
17376     +      %let ibn_inttarget_orig = &ibn_inttarget;
17378     +      %if %symexist(IGNBinTarget)=0 %then %do;
17379     +         %global ignbintarget ignfreqvar;
17380     +         filename temp catalog 'sashelp.emutil.em_getvarname.source';
17381     +         %include temp;
17382     +         filename temp;
17383     +         %getVarName(&EM_IMPORT_DATA, BIN_%substr(&ibn_inttarget,1,%sysfunc(min(%length(&ibn_inttarget),28))), IGNBinTarget);
17385     +         %if &EM_PROPERTY_INTTARGETMETHOD = DUPFREQ %then %do;
17386     +            %getVarName(&EM_IMPORT_DATA, _FREQ_, ignfreqvar);
17387     +         %end;
17388     +      %end;
17389     +      %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
17390     +         proc sql noprint;
17391     +            %if %EM_FREQ ne %then %do;
17392     +               select sum(&ibn_inttarget * %EM_FREQ) / sum(%EM_FREQ)
17393     +            %end;
17394     +            %else %do;
17395     +               select mean(&ibn_inttarget)
17396     +            %end;
17397     +            into :ignbincut trimmed from &EM_IMPORT_DATA;
17398     +         quit;
17399     +      %end;
17401     +      %let dsid=%sysfunc(open(&EM_IMPORT_DATA,i));
17402     +      %if &dsid %then %do;
17403     +         %let tarlabel=%trim(%sysfunc(varlabel(&dsid,%sysfunc(varnum(&dsid,&ibn_inttarget)))));
17404     +         %let rc=%sysfunc(close(&dsid));
17405     +      %end;
17406     +      %if %length(&tarlabel)=0 %then %let tarlabel = &ibn_inttarget;
17408     +      data _null_;
17409     +         file x mod;
17410     +         put ' ';
17412     +         %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
17413     +             put "&EM_CODEBAR;";
17414     +             %let note = Mean Cutoff Binary Transformation for Target;
17415     +             put "* &note;";
17416     +             put "&EM_CODEBAR;";
17417     +         %end;
17418     +         %else %if &EM_PROPERTY_INTTARGETMETHOD = CUTUSER %then %do;
17419     +             put "&EM_CODEBAR;";
17420     +             %let note = User-Specified Cutoff Binary Transformation for Target;
17421     +             put "* &note;";
17422     +             put "&EM_CODEBAR;";
17423     +             %let ignbincut = &EM_PROPERTY_USERCUTVALUE;
17424     +         %end;
17425     +         put "if &ibn_inttarget = . then &IGNBinTarget = .;";
17426     +         put "else do;";
17427     +         put "   if &ibn_inttarget > &ignbincut then &IGNBinTarget=1;";
17428     +         put "   else &IGNBinTarget=0;";
17429     +         put "end;";
17431     +         put "label &IGNBinTarget = 'Binary: %nrbquote(%substr(&tarlabel,1,192))';";
17432     +      run;
17434     +      filename deltaref "&EM_FILE_CDELTA_TRAIN";
17436     +      %if &EM_PROPERTY_RejectIntTarget = Y %then %do;
17438     +         data _null_;
17439     +            file deltaref;
17440     +            put "if name='&ibn_inttarget_orig' then role='REJECTED';";
17441     +            put "if name='&IGNBinTarget' then do;";
17442     +            put "   role='TARGET';";
17443     +            put "   level='BINARY';";
17444     +            put "end;";
17445     +         run;
17447     +      %end;
17448     +      %else %do;
17450     +         data _null_;
17451     +            file deltaref;
17452     +            put "if name='&ibn_inttarget_orig' then role='TARGET';";
17453     +            put "if name='&IGNBinTarget' then do;";
17454     +            put "   role='REJECTED';";
17455     +            put "   level='BINARY';";
17456     +            put "end;";
17457     +         run;
17458     +      %end;
17460     +      filename deltaref;
17462     +   %end;
17464     +    filename X;
17465     +    filename Y;
17467     +    %buildOptScoreCode;
17469     +    proc datasets library=work nolist;
17470     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
17471     +    run;
17472     +    quit;
17474     +%mend buildScoreCode;
17476     +%macro buildMetaCode(DeltaCodeFile=);
17478     +   /* set variable roles based on New Role column in the Results table */
17479     +   data _null_;
17480     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
17481     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
17482     +      %if &dsid %then %do;
17483     +        %let obs = %sysfunc(fetch(&dsid));
17484     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
17485     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
17486     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
17488     +        %do %while(&obs=0);
17489     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
17490     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
17491     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
17493     +          /* retrieve grp and woe names from varmappings dataset */
17494     +          %let choice = _VARIABLE_ = "&inputname";
17495     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
17496     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
17497     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
17498     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
17499     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
17501     +          put "if name = '&inputname' then role='REJECTED';";
17502     +          %if "&role" ne "DEFAULT" %then %do;
17503     +            put "if name = '&grpname' then role='&role';";
17504     +          %end;
17505     +          %else %do;
17506     +            put "if name = '&grpname' then role='&oldrole';";
17507     +          %end;
17508     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
17510     +          %let obs = %sysfunc(fetch(&dsid));
17511     +        %end;
17512     +      %end;
17513     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
17514     +   run;
17516     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
17517     +   data _null_;
17518     +      file &DeltaCodeFile MOD;
17520     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
17521     +      %if &sdsid %then %do;
17522     +        %let sobs = %sysfunc(fetch(&sdsid));
17523     +        %do %while(&sobs=0);
17524     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
17525     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
17526     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
17527     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
17529     +          %let checkgrp = GRP_&checkname;
17530     +          %let lenname = %length(&checkgrp);
17531     +          %if %eval(&lenname-32) > 0 %then %do;
17532     +            %let checkgrp = %substr(&checkgrp, 1, 32);
17533     +          %end;
17535     +          %let choice = _VARIABLE_ ="&checkname";
17536     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
17538     +          /* if var not found in varmappings, delete variables; */
17539     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
17540     +          %if &vdsid eq 0 %then %do;
17541     +            put 'if name="&displayvar" then delete;';
17542     +            %let dispgrp = GRP_&displayvar;
17543     +            put 'if name="&dispgrp" then delete;';
17544     +          %end;
17546     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
17547     +          %let sobs = %sysfunc(fetch(&sdsid));
17548     +        %end;
17549     +      %end;
17550     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
17551     +   run;
17553     +%mend buildMetaCode;
17555     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
17557     +   proc sort data=&coarse out=sortedcoarse nodupkey;
17558     +     by display_var;
17559     +   run;
17560     +   proc sort data=&varmappings nodupkey;
17561     +     by _variable_;
17562     +   run;
17563     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
17564     +     proc sort data=&resultstable; by display_var; run;
17566     +     /* check that _new_role exists - did not exist in earlier releases */
17567     +     %let rds=%sysfunc(open(&resultstable));
17568     +     %let _newrolenum = %sysfunc(VARNUM(&rds, _new_role_));
17569     +     %let rds=%sysfunc(close(&rds));
17570     +   %end;
17572     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
17573     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
17574     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
17575     +        &resultstable (keep = display_var %if &_newrolenum %then _new_role_; )
17576     +     %end;
17577     +     ;
17578     +     by display_var;
17579     +     length _role_ _new_role_ $10;
17580     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
17581     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
17582     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_calcrole_vlabel, NOQUOTE))"
17583     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
17584     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
17585     +           ;
17587     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
17588     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
17589     +                _role_ = "Rejected";
17590     +             else _role_ = "Input";
17591     +           %end;
17592     +           %else %do;
17593     +             _role_ = "Input";
17594     +           %end;
17595     +           if _new_role_ eq "" then _new_role_="Default";
17596     +      if ^_a then do;
17597     +        _gini_ = 0;
17598     +        _role_ = 'Rejected';
17599     +        if _new_role_ eq "" then _new_role_="Default";
17600     +      end;
17601     +   run;
17602     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
17603     +     by NAME;
17604     +   run;
17605     +   data outlabel;
17606     +     set outlabel;
17607     +     if _label_ = '' then _label_ = _variable_;
17608     +   run;
17609     +   data &resultstable;
17610     +     merge &resultstable(in=_a_) outlabel;
17611     +     by display_Var;
17612     +     if _a_ then output;
17613     +   run;
17614     +   proc datasets library=work nolist;
17615     +     delete sortedcoarse outlabel;
17616     +   run;
17617     +   quit;
17618     +   proc sort data=&resultstable nodupkey;
17619     +      by DESCENDING
17620     +        _gini_ display_Var;
17621     +   run;
17622     +   data &resultstable;
17623     +     set &resultstable;
17625     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
17626     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
17627     +     giniOrder = _N_;
17628     +     _gini_ = round(_GINI_, .001);
17629     +     drop _variable_;
17630     +   run;
17632     +   proc print data=&resultstable label;
17633     +   run;
17635     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
17636     +   data &coarse;
17637     +     set &coarse;
17638     +     length role $10;
17639     +     %let dsid = %sysfunc(open(&resultstable));
17640     +     %if &dsid %then %do;
17641     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
17642     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
17643     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
17645     +       %let obs = %sysfunc(fetch(&dsid));
17646     +       %do %while(&obs=0);
17647     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
17648     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
17649     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
17651     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
17652     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
17653     +            giniOrder = &order;
17654     +            role = "&role";
17655     +          end;
17657     +          %let obs = %sysfunc(fetch(&dsid));
17658     +       %end;
17659     +     %end;
17660     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
17661     +   run;
17664     +%mend EM_GENERATE_RESULTSTABLE;
17666     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
17668     +    /* instantiate the zchar macro to be used in adding bin definition */
17669     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
17670     +    %inc _temp;
17671     +    filename _temp;
17673     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
17674     +      by _variable_ binFlag _group_ LB;
17675     +    run;
17677     +    data tempExport;
17678     +      set sortedFine;
17679     +      by _variable_ binFlag _group_;
17680     +      length _split_value_ $200;
17682     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
17683     +      if binFlag = 0 then do;
17684     +        index = kindex(_variable_, "BIN_");
17685     +        if index gt 0 then do;
17686     +          _LEVEL_ = "INTERVAL";
17687     +        end;
17688     +        _Split_value_ = _split_value_;
17689     +        output;
17690     +      end;
17691     +      else do;
17692     +         * if last._group_ then do;
17693     +          index = kindex(_variable_, "BIN_");
17694     +          if index gt 0 then do;
17695     +            _LEVEL_ = "INTERVAL";
17696     +          end;
17697     +          _Split_value_ = %zchar(UB);
17698     +          output;
17699     +         * end;
17700     +      end;
17702     +      rename display_Var = _variable_;
17703     +      keep display_var _level_ _group_ _split_value_ binFlag;
17704     +    run;
17706     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
17707     +       data &EXPORTGROUPING;
17708     +         set tempexport;
17709     +       run;
17710     +    %end;
17711     +    %else %do;
17712     +       /* determine if EXPORTGROUPING already exists */
17713     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
17714     +         data &EXPORTGROUPING;
17715     +            set &EXPORTGROUPING tempexport;
17716     +         run;
17717     +       %end;
17718     +       %else %do;
17719     +         data &EXPORTGROUPING;
17720     +            set tempexport;
17721     +         run;
17722     +       %end;
17723     +    %end;
17725     +    proc datasets lib=work nolist;
17726     +      delete sortedFine tempexport;
17727     +    run;
17728     +    quit;
17730     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17734      *------------------------------------------------------------*;
17735      * End UPDATE: BINNING;
17736      *------------------------------------------------------------*;
17737      

17738      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\BINNING\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17740      %let _HPDMGRIDHOST=;
17741      %let _HPDMGRIDINSTALLLOC=;
17742      %let _HPDMGRIDDATASERVER=;
17743      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* BINNING : End update 
* datetime : 07NOV2018:21:48:09 
* 
*------------------------------------------------------------* 
17744      %em_getactionstatus(emlib =EMWS1, nodeid=BINNING);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17745      %let em_filemodtime=;
17746      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
17747      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
17748      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
17749      where fileref eq "#LN00317";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00317";
17750      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
17751      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00317';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

17752      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
17753      %let em_Train = N;
17754      %let em_Score = N;
17755      %let em_Report = N;
17756      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.13 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "BINNING" has already run. 
Node "BINNING" succeeded. 
17757      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17758      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17759      put '<Node Id="BINNING" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="BINNING" Event="Complete" Pid="8200" Gridid=""/>';
17760      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "CNTRL3" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
17761      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17762      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17763      put '<Node Id="Varsel" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Varsel" Event="Run" Pid="8200" Gridid=""/>';
17764      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17765      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Varsel : Beginning update before running 
* datetime : 07NOV2018:21:48:10 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Varsel_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Varsel\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17785      %let _HPDMGRIDHOST=;
17786      %let _HPDMGRIDINSTALLLOC=;
17787      %let _HPDMGRIDDATASERVER=;
17788      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Varsel : End update 
* datetime : 07NOV2018:21:48:10 
* 
*------------------------------------------------------------* 
17789      %em_getactionstatus(emlib =EMWS1, nodeid=Varsel);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17790      %let em_Train = N;
17791      %let em_Score = N;
17792      %let em_Report = N;
17793      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.10 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Varsel" has already run. 
Node "Varsel" succeeded. 
17794      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17795      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17796      put '<Node Id="Varsel" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Varsel" Event="Complete" Pid="8200" Gridid=""/>';
17797      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "CNTRL3" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
17798      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17799      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17800      put '<Node Id="Neural6" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural6" Event="Run" Pid="8200" Gridid=""/>';
17801      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17802      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural6 : Beginning update before running 
* datetime : 07NOV2018:21:48:11 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural6_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Neural6\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17822      %let _HPDMGRIDHOST=;
17823      %let _HPDMGRIDINSTALLLOC=;
17824      %let _HPDMGRIDDATASERVER=;
17825      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural6 : End update 
* datetime : 07NOV2018:21:48:12 
* 
*------------------------------------------------------------* 
17826      %em_getactionstatus(emlib =EMWS1, nodeid=Neural6);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17827      %let em_Train = N;
17828      %let em_Score = N;
17829      %let em_Report = N;
17830      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural6" has already run. 
Node "Neural6" succeeded. 
17831      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17832      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17833      put '<Node Id="Neural6" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural6" Event="Complete" Pid="8200" Gridid=""/>';
17834      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "CNTRL3" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
traverser_readyNode_note 
17835      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17836      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17837      put '<Node Id="Neural5" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural5" Event="Run" Pid="8200" Gridid=""/>';
17838      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17839      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural5 : Beginning update before running 
* datetime : 07NOV2018:21:48:12 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural5_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Neural5\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17859      %let _HPDMGRIDHOST=;
17860      %let _HPDMGRIDINSTALLLOC=;
17861      %let _HPDMGRIDDATASERVER=;
17862      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural5 : End update 
* datetime : 07NOV2018:21:48:13 
* 
*------------------------------------------------------------* 
17863      %em_getactionstatus(emlib =EMWS1, nodeid=Neural5);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17864      %let em_Train = N;
17865      %let em_Score = N;
17866      %let em_Report = N;
17867      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural5" has already run. 
Node "Neural5" succeeded. 
17868      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17869      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17870      put '<Node Id="Neural5" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural5" Event="Complete" Pid="8200" Gridid=""/>';
17871      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "CNTRL3" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
17872      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17873      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17874      put '<Node Id="Neural4" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural4" Event="Run" Pid="8200" Gridid=""/>';
17875      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17876      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural4 : Beginning update before running 
* datetime : 07NOV2018:21:48:14 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural4_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Neural4\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17896      %let _HPDMGRIDHOST=;
17897      %let _HPDMGRIDINSTALLLOC=;
17898      %let _HPDMGRIDDATASERVER=;
17899      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural4 : End update 
* datetime : 07NOV2018:21:48:14 
* 
*------------------------------------------------------------* 
17900      %em_getactionstatus(emlib =EMWS1, nodeid=Neural4);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17901      %let em_Train = N;
17902      %let em_Score = N;
17903      %let em_Report = N;
17904      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural4" has already run. 
Node "Neural4" succeeded. 
17905      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17906      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17907      put '<Node Id="Neural4" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural4" Event="Complete" Pid="8200" Gridid=""/>';
17908      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
Node "CNTRL3" succeeded. 
17909      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17910      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17911      put '<Node Id="CNTRL3" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="CNTRL3" Event="Complete" Pid="8200" Gridid=""/>';
17912      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
17913      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17914      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17915      put '<Node Id="MdlComp" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="MdlComp" Event="Run" Pid="8200" Gridid=""/>';
17916      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17917      %let emloopmode =;
*------------------------------------------------------------* 
* 
* MdlComp : Beginning update before running 
* datetime : 07NOV2018:21:48:16 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.MdlComp_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT export needupdate;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_exportSet EMWS1.Neural5_exportSet EMWS1.Neural6_exportSet EMWS1.Neural3_exportSet EMWS1.Neural_exportSet EMWS1.Neural2_exportSet ;
MPRINT(EM_DIAGRAM):   where EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   drop export needupdate;
MPRINT(EM_DIAGRAM):   port = upcase(trim(NODELABEL)!!'_'!!left(NODEPORT));
MPRINT(EM_DIAGRAM):   if port = upcase("NEURAL4_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL4_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL4_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL5_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL5_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL5_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL6_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL6_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL6_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL3_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL3_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL3_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL2_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL2_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL2_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else USE="Y";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1SC3_BN as select * from WORK.M1XEJ8ID order by PORT;
MPRINT(EM_DIAGRAM):   create view work._comp1SC3_BN as select * from WORK.M2ZCERII order by PORT;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1SC3_BN compare=work._comp1SC3_BN out=WORK._DIFF1DWZ0K7 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id PORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\MdlComp\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17980      %let _HPDMGRIDHOST=;
17981      %let _HPDMGRIDINSTALLLOC=;
17982      %let _HPDMGRIDDATASERVER=;
17983      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* MdlComp : End update 
* datetime : 07NOV2018:21:48:17 
* 
*------------------------------------------------------------* 
17984      %em_getactionstatus(emlib =EMWS1, nodeid=MdlComp);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17985      %let em_Train = N;
17986      %let em_Score = N;
17987      %let em_Report = N;
17988      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.11 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "MdlComp" has already run. 
Node "MdlComp" succeeded. 
17989      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17990      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17991      put '<Node Id="MdlComp" Event="Complete" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="MdlComp" Event="Complete" Pid="8200" Gridid=""/>';
17992      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_readyNode_note 
17993      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17994      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17995      put '<Node Id="Report" Event="Run" Pid="8200" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Report" Event="Run" Pid="8200" Gridid=""/>';
17996      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-MBA048,
      Local Host IP addr=136.165.163.243,
      Peer Hostname Name=COB-MBA048.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=56351,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17997      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Report : Beginning update before running 
* datetime : 07NOV2018:21:48:17 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Report_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
18028      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18029      set EMWS1.MdlComp_CMeta_TRAIN (obs=1);
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_CMeta_TRAIN (obs=1);
18030      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP_CMETA_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18031      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18032      set EMWS1.MdlComp_CMeta_TRAIN (obs=1);
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_CMeta_TRAIN (obs=1);
18033      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP_CMETA_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

18034      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
18035      * Report: Update Variables Set;
MPRINT(EM_DIAGRAM):   * Report: Update Variables Set;
18036      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

18037      data EMWS1.Report_VariableSet;
MPRINT(EM_DIAGRAM):    data EMWS1.Report_VariableSet;
18038      length USE $1;
MPRINT(EM_DIAGRAM):   length USE $1;
18039      label USE = "Use";
MPRINT(EM_DIAGRAM):   label USE = "Use";
18040      length REPORT $1;
MPRINT(EM_DIAGRAM):   length REPORT $1;
18041      label REPORT = "Report";
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
18042      set EMWS1.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_CMeta_TRAIN;
18043      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable USE is uninitialized.
NOTE: There were 23 observations read from the data set EMWS1.MDLCOMP_CMETA_TRAIN.
NOTE: The data set EMWS1.REPORT_VARIABLESET has 23 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
      

18044      * Report: End of Update Variables Set;
MPRINT(EM_DIAGRAM):    * Report: End of Update Variables Set;
18045      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'CIS 445 Project 3';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Project 3';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
18256      %let emexceptionString =;
18257      %let EMEXCEPTIONSTRING=;
18258      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
18259      * UPDATE: Report;
MPRINT(EM_DIAGRAM):   * UPDATE: Report;
18260      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
18261      %let EM_ACTION = UPDATE;
18262      %let syscc = 0;
18263      %macro main;
18264      
18265        filename temp catalog 'sashelp.emutil.reporter_macros.source';
18266        %include temp;
18267        filename temp;
18268      
18269        %setProperties;
18270      
18271        %if %upcase(&EM_ACTION) = CREATE %then %do;
18272          filename temp catalog 'sashelp.emutil.reporter_create.source';
18273          %include temp;
18274          filename temp;
18275      
18276          %create;
18277        %end;
18278      
18279         %else
18280         %if %upcase(&EM_ACTION) = TRAIN %then %do;
18281      
18282             filename temp catalog 'sashelp.emutil.reporter_train.source';
18283             %include temp;
18284             filename temp;
18285             %train;
18286         %end;
18287      
18288         %doendm:
18289      %mend main;
18290      
18291      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.reporter_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_MACROS.SOURCE.
18294     +%macro SetProperties;
18296     +     /* reporting options */
18297     +     %em_checkmacro(name=EM_PROPERTY_FORMAT,         value=PDF , global=Y);
18298     +     %em_checkmacro(name=EM_PROPERTY_NODES ,         value=PATH, global=Y);
18299     +     %em_checkmacro(name=EM_PROPERTY_STYLE ,         value=DEFAULT, global=Y);
18300     +     %em_checkmacro(name=EM_PROPERTY_SHOWALL,        value=N, global=Y);
18302     +     %em_checkmacro(name=EM_PROPERTY_SUMMARIZATION,  value=Y, global=Y);
18303     +     %em_checkmacro(name=EM_PROPERTY_VARRANKING,     value=Y, global=Y);
18304     +     %em_checkmacro(name=EM_PROPERTY_CLASSIFICATION, value=Y, global=Y);
18305     +     %em_checkmacro(name=EM_PROPERTY_CROSSTABS,      value=Y, global=Y);
18306     +     %em_checkmacro(name=EM_PROPERTY_LIFTCHART,      value=Y, global=Y);
18307     +     %em_checkmacro(name=EM_PROPERTY_FITSTAT,        value=Y, global=Y);
18308     +     %em_checkmacro(name=EM_PROPERTY_COMPAREMDL,     value=Y, global=Y);
18310     +     %em_checkmacro(name=EM_PROPERTY_BASICOUTPUT,    value=N, global=Y);
18312     +    %em_checkmacro(name=EM_PROPERTY_textfont,   value=Arial, global=Y);
18313     +    %em_checkmacro(name=EM_PROPERTY_headersize, value=8, global=Y);
18314     +    %em_checkmacro(name=EM_PROPERTY_textsize,   value=6, global=Y);
18315     +    %em_checkmacro(name=EM_PROPERTY_titlesize,  value=10, global=Y);
18317     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: Report;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
18318      *------------------------------------------------------------*;
18319      * End UPDATE: Report;
18320      *------------------------------------------------------------*;
18321      

18322      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Report\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18324      %let _HPDMGRIDHOST=;
18325      %let _HPDMGRIDINSTALLLOC=;
18326      %let _HPDMGRIDDATASERVER=;
18327      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Report : End update 
* datetime : 07NOV2018:21:48:19 
* 
*------------------------------------------------------------* 
18328      %em_getactionstatus(emlib =EMWS1, nodeid=Report);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18329      %let em_Train = Y;
18330      %let em_Report = Y;
18331      %let em_Score = Y;
18332      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

18333      %let emloopmode =;
18334      %let emloopnumber =0;
18335      %let emloopId =Report;
*------------------------------------------------------------* 
* 
* Report : Running 
* datetime : 07NOV2018:21:48:19 
* 
*------------------------------------------------------------* 
18336      %let SYSCC =0;
18337      %let EMGROUPMODE =;
18338      %let EMGROUPID =;
MPRINT(EM_DIAGRAM):      filename temp catalog 'sashelp.emutil.em_vardist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_classdist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checksetinit.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checkerror.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odsliston.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odslistoff.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_getvarname.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    filename L34A52NZ "J:\JMMORR01\CIS 445\CIS 445 Project 3\Workspaces\EMWS1\Report\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto log=L34A52NZ new;
MPRINT(EM_DIAGRAM):   run;
